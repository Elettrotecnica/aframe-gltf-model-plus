{"version":3,"file":"gltf-model-plus.js","mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,wCAAwC,OAAO;AAC/C;AACA;AACA;AACA;AACA;;AAE2B;;;;;;;;;;;;;;;;;ACjE3B;AACoD;;AAEpD;;AAEA;AACA;AACA;AACA,oBAAoB,yBAAyB;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,yBAAyB,6DAAe;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC,6BAA6B;AAC7B,0BAA0B;AAC1B,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,KAAK;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,KAAK;AACpD;;AAEA;AACA,mDAAmD,KAAK;AACxD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,GAAG;AAChB;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA,oCAAoC,cAAc;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA,+BAA+B,yBAAyB;AACxD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,YAAY;AAC9C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mCAAmC;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACrVA;AACgE;AACnB;;AAE7C;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,0EAAU;AACjC,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,0EAAU;AACjC,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,qDAAa;AACnB,KAAK;AACL,GAAG;AACH,CAAC;;;;;;;;;;;;;;;;;;;;;ACzHD;AACgE;AACe;AAClC;;AAE7C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;;AAEO;AACP;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,cAAc,gBAAgB;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC,KAAK;;AAEtC;AACA,mFAAmF;AACnF;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mBAAmB;AACvC;AACA,2CAA2C,WAAW;AACtD;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6CAA6C,OAAO;AACpD;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACO;AACP,YAAY,eAAe;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,0EAAU;AACzE;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,sCAAsC,KAAK;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,kBAAkB;AAClB;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,0DAA0D,8BAA8B;AACxF;AACA;AACA;AACA,sCAAsC,sBAAsB;AAC5D;AACA,qDAAqD,MAAM;AAC3D;AACA;AACA,0BAA0B;AAC1B,0EAA0E,EAAE;AAC5E;AACA;AACA;AACA;;AAEA,kCAAkC,kBAAkB;AACpD;AACA;AACA;AACA;AACA,kBAAkB;AAClB,mCAAmC,qDAAa;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,qBAAqB;AACrB,oBAAoB;AACpB,4DAA4D,cAAc;AAC1E;AACA;AACA,eAAe;AACf;AACA,WAAW;;AAEX;AACA,kCAAkC,uFAA0B;AAC5D;;AAEA;AACA,YAAY,qDAAa;AACzB;;AAEA,0BAA0B,uBAAuB;AACjD;AACA;AACA;;AAEA,oCAAoC,wDAAwD;AAC5F;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA,gCAAgC,oBAAoB;AACpD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,mCAAmC,0BAA0B;AAC7D;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,0BAA0B;AAC9C;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;;;;;;;;;;;;;;;;ACpZA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,QAAQ;AACR;AACA;AACA;AACA;AACA,WAAW;AACX,UAAU;AACV;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,mDAAmD;AACnD,GAAG;AACH;AACA;AACA,oEAAoE;AACpE;AACA,GAAG;AACH,CAAC;;AAED;AACA;AACA;AACA;AACO;AACP;AACA,cAAc,yBAAyB,oBAAoB;AAC3D,iBAAiB,+FAA+F;AAChH,oBAAoB,gCAAgC;AACpD,GAAG;AACH;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;AACH,CAAC;;;;;;;;;;;ACrED;AACA;AACA,YAAY,YAAY;AACxB,qBAAqB,aAAa;AAClC,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;;;;;;;;;;;;;;;;;;;;AC1BD;AACA;AACA;AACA;AACA;AACA;;AAUe;AACkD;AACR;;AAEzD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,0BAA0B,0CAAO,oBAAoB,0CAAO;AAC5D;AACA;AACA;AACA;AACA;AACA;AACe,0BAA0B,uCAAI;AAC7C;AACA,yBAAyB,gDAAa;AACtC;;AAEA;AACA,sBAAsB,aAAa;AACnC,sBAAsB,UAAU;AAChC,cAAc,UAAU;AACxB;;AAEA,uCAAuC,oDAAiB,GAAG,uDAAoB;;AAE/E,wCAAwC,iDAAc;;AAEtD,yCAAyC,4DAA4D;AACrG;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,+DAA+D;;AAE/D;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;;AAEA;;AAEA;AACA;AACA,qBAAqB,0CAAO,gBAAgB,0CAAO;AACnD,qBAAqB,0CAAO,eAAe,0CAAO;AAClD;;AAEA,uBAAuB,2EAAY;AACnC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,oBAAoB,sBAAsB;AAC1C,sBAAsB,sBAAsB;AAC5C;;AAEA,wBAAwB,yBAAyB;AACjD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,eAAe,4BAA4B;AAC3C,aAAa,eAAe;AAC5B,kBAAkB,+BAA+B;AACjD,iBAAiB,yBAAyB,cAAc;AACxD,iBAAiB,yBAAyB,kBAAkB;AAC5D,kBAAkB,8BAA8B;AAChD,iBAAiB,yBAAyB,eAAe;AACzD,iBAAiB,yBAAyB,iBAAiB;AAC3D,oBAAoB,4BAA4B;AAChD,oBAAoB,+BAA+B;AACnD,GAAG;;AAEH;AACA;AACA,2BAA2B,gDAAa,QAAQ,qDAAe;AAC/D;;AAEA,kCAAkC;AAClC;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA,GAAG;AACH,CAAC;;;;;;;;;;;AChWD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,oBAAoB,+BAA+B;AACnD;AACA,cAAc,oBAAoB;AAClC,cAAc,YAAY;;AAE1B;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,yBAAyB,cAAc;AACpD,iBAAiB,yBAAyB,cAAc;AACxD,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;;AAEzB;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,WAAW;AACX,UAAU;AACV;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;;;;;;;;;;;;;;;;;;;AC1FD;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,wCAAwC,4CAA4C;AACpF;AACA;AACA;AACA;;AAEO;;AAEA;AACP;AACA;AACA,0CAA0C,wCAAwC;AAClF;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,8BAA8B;AAClD,qBAAqB,8BAA8B;AACnD,uBAAuB,8BAA8B;AACrD,qBAAqB,8BAA8B;AACnD,yBAAyB,8BAA8B;AACvD,8BAA8B,8BAA8B;AAC5D,sCAAsC,8BAA8B;AACpE,kBAAkB,8BAA8B;AAChD,kBAAkB,kCAAkC;AACpD,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,mBAAmB;AAClE;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2CAA2C,6CAA6C;AACxF;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB;AACzB;AACA,8CAA8C,0CAA0C;AACxF,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,2CAA2C,wCAAwC;AACnF,QAAQ;AACR,2CAA2C,kBAAkB;AAC7D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;;;;;;;;;;;;;;;;;;;AC1ND;AACsE;AACd;;AAEjD;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB;;AAEvB;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,gFAAa,QAAQ,qDAAc,KAAK,WAAW;AACjE,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT,MAAM;AACN;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AC9GoE;AAClB;AACN;AACgB;AACd;AACD;;AAEtC;AACP,0CAA0C,6EAA0B;AACpE,iCAAiC,2DAAiB;AAClD,8BAA8B,qDAAc;AAC5C,sCAAsC,qEAAsB;AAC5D,+BAA+B,uDAAe;AAC9C,8BAA8B,sDAAe;;;;;;;;;;;;;;;;;ACbK;;AAE3C;AACP,aAAa,+DAAuB;AACpC;AACA,+BAA+B;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,gDAAgD;AAChD,IAAI;AACJ;AACA,kDAAkD;AAClD;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;AC1BO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,SAAS,SAAS,sBAAsB;AAClH;AACA;AACA;;;;;;;;;;;;;;;;;ACrBA;AACuC;;AAEhC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,oDAAY;AACd;;;;;;;;;;;;;;;;;;ACbsD;;AAE/C;AACP;AACA,sBAAsB,8DAAU;AAChC;AACA,iCAAiC;AACjC;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACzBuC;AACe;;AAE/C;AACP;AACA,oBAAoB,8DAAU;AAC9B;AACA;AACA,EAAE,oDAAY;AACd;;;;;;;;;;;;;;;;;ACTkD;;AAE3C;AACP,aAAa,+DAAuB;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1BA;;;;;;;;;;;;;;;;ACAA;;AAYe;;AAER,4BAA4B,yCAAM;;AAEzC;;AAEA;;AAEA,cAAc,mDAAgB;;AAE9B;;AAEA;;AAEA,gBAAgB,mDAAgB,aAAa,4CAAS;;AAEtD;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,qBAAqB,6CAAU;AAC/B;AACA;AACA;;AAEA;;AAEA;;AAEA,KAAK;;AAEL;;AAEA;;AAEA,MAAM;;AAEN;;AAEA;;AAEA;;AAEA;;AAEA,GAAG;;AAEH;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,6BAA6B,mDAAgB;;AAE7C,wBAAwB,0CAAO;AAC/B,wBAAwB,0CAAO;;AAE/B;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,8BAA8B,mDAAgB;AAC9C;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,sBAAsB,8CAAW;AACjC;AACA;AACA;AACA;AACA,sBAAsB,+CAAY;AAClC,sBAAsB,+CAAY;AAClC,kBAAkB,sDAAmB;AACrC,kBAAkB,sDAAmB;AACrC;AACA;;AAEA,wBAAwB,gDAAa;AACrC;AACA;AACA;AACA;AACA;AACA,wBAAwB,+CAAY;AACpC,wBAAwB,+CAAY;AACpC,oBAAoB,sDAAmB;AACvC,oBAAoB,sDAAmB;AACvC,oBAAoB,sDAAmB;AACvC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;;;;;;;;;;;;AC/Je;;AAEf;AACA;;AAEA,yBAAyB,oDAAiB;;AAE1C;;AAEA;;AAEA,cAAc,gDAAa;;AAE3B;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,IAAI;;AAEJ;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,iBAAiB;AACjB;AACA;;AAEA;;AAEA;;AAEA,mBAAmB,MAAM;AACzB;AACA;AACA;AACA,yDAAyD;AACzD,MAAM;AACN;AACA;;AAEA;;AAEA;;AAEA,IAAI;;AAEJ;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,gBAAgB;;AAEhB;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,iCAAiC;;AAEjC;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,IAAI;;AAEJ;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,wBAAwB,WAAW;;AAEnC;;AAEA;AACA;;AAEA,QAAQ;;AAER;AACA;AACA,qBAAqB;;AAErB;;AAEA;;;AAGA;AACA;AACA,+BAA+B;AAC/B,sBAAsB,OAAO;;AAE7B;AACA;AACA,6BAA6B;AAC7B;AACA,6BAA6B;AAC7B;AACA,6BAA6B;AAC7B;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,iCAAiC,4CAAS;AAC1C,iCAAiC,4CAAS;AAC1C,iCAAiC,4CAAS;AAC1C,iCAAiC,4CAAS;;AAE1C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA,QAAQ,4CAAS;;AAEjB;AACA;;AAEA,qBAAqB,iBAAiB;;AAEtC;;AAEA;;AAEA;AACA,WAAW,4CAAS;AACpB;;AAEA,QAAQ,gDAAa;;AAErB;AACA;;AAEA,qBAAqB,iBAAiB;;AAEtC;;AAEA;;AAEA;AACA,WAAW,gDAAa;AACxB;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,SAAS,4CAAS;AAClB,SAAS,gDAAa;;AAEtB,0BAA0B,uDAAoB;AAC9C,yBAAyB,+CAAY;AACrC,yBAAyB,+CAAY;AACrC;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEsB;;;;;;;;;;;;;;;;ACjctB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,mBAAmB,SAAS;;AAE5B;;AAEA;;AAEA;AACA;;AAEA,mBAAmB,SAAS;;AAE5B;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,UAAU;AACV;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,uBAAuB;AACvB;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA,WAAW;;AAEX;;AAEA,IAAI;;AAEJ,WAAW;;AAEX,IAAI;;AAEJ;AACA;AACA;AACA,2BAA2B;AAC3B;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yDAAyD;;AAEzD;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA,wBAAwB;AACxB;AACA,oBAAoB;AACpB;AACA;AACA,uBAAuB;AACvB;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;;AAEA,YAAY,QAAQ,QAAQ,QAAQ,QAAQ;;AAE5C;;AAEA,KAAK;;AAEL,YAAY,QAAQ,QAAQ,QAAQ,QAAQ;;AAE5C;;AAEA,KAAK;;AAEL,YAAY,QAAQ,QAAQ,QAAQ,QAAQ;;AAE5C,KAAK;;AAEL,IAAI,OAAO;;AAEX;;AAEA,YAAY,QAAQ,QAAQ,QAAQ,QAAQ;;AAE5C;;AAEA,KAAK;;AAEL,YAAY,QAAQ,QAAQ,QAAQ,QAAQ;;AAE5C;;AAEA,KAAK;;AAEL,YAAY,QAAQ,QAAQ,QAAQ,QAAQ;;AAE5C,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA,iCAAiC;AACjC;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA,oCAAoC;AACpC,oBAAoB;AACpB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEwB;;;;;;;UC3bxB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA,qBAAuB,MAAM,QAAQ;;AAEM;AACL;AACJ;AACK;AACJ;AACH;AACD;AACV","sources":["webpack://@c-frame/aframe-gltf-model-plus/webpack/universalModuleDefinition","webpack://@c-frame/aframe-gltf-model-plus/./src/components/EventDispatcher.js","webpack://@c-frame/aframe-gltf-model-plus/./src/components/FakeEntity.js","webpack://@c-frame/aframe-gltf-model-plus/./src/components/environment-settings.js","webpack://@c-frame/aframe-gltf-model-plus/./src/components/gltf-model-plus.js","webpack://@c-frame/aframe-gltf-model-plus/./src/components/media-frame.js","webpack://@c-frame/aframe-gltf-model-plus/./src/components/reflection-probe.js","webpack://@c-frame/aframe-gltf-model-plus/./src/components/simple-water.js","webpack://@c-frame/aframe-gltf-model-plus/./src/components/uv-scroll.js","webpack://@c-frame/aframe-gltf-model-plus/./src/components/waypoint.js","webpack://@c-frame/aframe-gltf-model-plus/./src/inflators/environment-settings.js","webpack://@c-frame/aframe-gltf-model-plus/./src/inflators/index.js","webpack://@c-frame/aframe-gltf-model-plus/./src/inflators/media-frame.js","webpack://@c-frame/aframe-gltf-model-plus/./src/inflators/nav-mesh.js","webpack://@c-frame/aframe-gltf-model-plus/./src/inflators/reflection-probe.js","webpack://@c-frame/aframe-gltf-model-plus/./src/inflators/utils.js","webpack://@c-frame/aframe-gltf-model-plus/./src/inflators/uv-scroll.js","webpack://@c-frame/aframe-gltf-model-plus/./src/inflators/waypoint.js","webpack://@c-frame/aframe-gltf-model-plus/external umd \"THREE\"","webpack://@c-frame/aframe-gltf-model-plus/./node_modules/three/examples/jsm/loaders/LUTCubeLoader.js","webpack://@c-frame/aframe-gltf-model-plus/./node_modules/three/examples/jsm/loaders/RGBELoader.js","webpack://@c-frame/aframe-gltf-model-plus/./node_modules/three/examples/jsm/math/SimplexNoise.js","webpack://@c-frame/aframe-gltf-model-plus/webpack/bootstrap","webpack://@c-frame/aframe-gltf-model-plus/webpack/runtime/compat get default export","webpack://@c-frame/aframe-gltf-model-plus/webpack/runtime/define property getters","webpack://@c-frame/aframe-gltf-model-plus/webpack/runtime/hasOwnProperty shorthand","webpack://@c-frame/aframe-gltf-model-plus/webpack/runtime/make namespace object","webpack://@c-frame/aframe-gltf-model-plus/webpack/runtime/publicPath","webpack://@c-frame/aframe-gltf-model-plus/./src/index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"THREE\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"THREE\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"THREE\")) : factory(root[\"THREE\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, (__WEBPACK_EXTERNAL_MODULE_three__) => {\nreturn ","/**\n * @author mrdoob / http://mrdoob.com/\n * @license MIT\n * https://github.com/mrdoob/eventdispatcher.js/tree/f31179e964ce6cd76818fd25f4152d4bcc82040c/src\n * with `event.target = this` commented, target is set before calling dispatchEvent.\n * This code is used in FakeEntity.\n */\n\nclass EventDispatcher {\n  addEventListener(type, listener) {\n    if (this._listeners === undefined) this._listeners = {};\n\n    const listeners = this._listeners;\n\n    if (listeners[type] === undefined) {\n      listeners[type] = [];\n    }\n\n    if (listeners[type].indexOf(listener) === -1) {\n      listeners[type].push(listener);\n    }\n  }\n\n  hasEventListener(type, listener) {\n    if (this._listeners === undefined) return false;\n\n    const listeners = this._listeners;\n\n    return listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;\n  }\n\n  removeEventListener(type, listener) {\n    if (this._listeners === undefined) return;\n\n    const listeners = this._listeners;\n    const listenerArray = listeners[type];\n\n    if (listenerArray !== undefined) {\n      const index = listenerArray.indexOf(listener);\n\n      if (index !== -1) {\n        listenerArray.splice(index, 1);\n      }\n    }\n  }\n\n  dispatchEvent(event) {\n    if (this._listeners === undefined) return;\n\n    const listeners = this._listeners;\n    const listenerArray = listeners[event.type];\n\n    if (listenerArray !== undefined) {\n      // event.target = this;\n\n      // Make a copy, in case listeners are removed while iterating.\n      const array = listenerArray.slice(0);\n\n      for (let i = 0, l = array.length; i < l; i++) {\n        array[i].call(this, event);\n      }\n    }\n  }\n}\n\nexport { EventDispatcher };\n","/* global AFRAME, NAF, THREE */\nimport { EventDispatcher } from \"./EventDispatcher\";\n\nconst MULTIPLE_COMPONENT_DELIMITER = \"__\";\n\n// Reusable object for performance\nconst eventData = {};\nconst singlePropUpdate = {};\nconst FAKE_NODE = { removeChild: () => {} }; // eslint-disable-line\n\nfunction getRotation(entityEl) {\n  const radToDeg = THREE.MathUtils.radToDeg;\n  const rotation = entityEl.object3D.rotation;\n  const rotationObj = entityEl.rotationObj;\n  rotationObj.x = radToDeg(rotation.x);\n  rotationObj.y = radToDeg(rotation.y);\n  rotationObj.z = radToDeg(rotation.z);\n  return rotationObj;\n}\n\n/**\n * FakeEntity has a similar API than a-entity but doesn't extend HTMLElement.\n * It allows to use existing aframe components on a THREE node (Group or Object3D) without adding extra DOM element or THREE.Group.\n * This object is created automatically via the addComponent function used in gltf-model-plus component.\n * Differences from a-entity:\n * - Doesn't support component dependencies or mixins logic\n * - Support only simple setAttribute(componentName, object), only one component of the same type, mainly used if a component is using this api.\n * - getAttribute/removeAttribute is not supported, so we're not handling special case of getAttribute for position rotation scale,\n *   use object3D.position directly.\n * - el.object3D is the node.\n *   The fake entity is there only to have a compatible API to use some existing aframe components.\n * - Be careful, node.el may not be the FakeEntity until the FakeEntity is created by adding a first component to the node,\n *   before that it will be the closest a-entity node, you may use node.fakeEl if you need to access the fake entity.\n * - In a component associated to a FakeEntity, this.el.children and this.el.parentNode won't be supported. The THREE node is the primary element here,\n *   so you probably want to modify the component to use this.el.object3D.children for example.\n * - FakeEntity remove is not implemented because we don't have children/parentNode set. (We actually have a weird hack for parentNode, see below.)\n *   Properly removing all components are done externarly by calling node.fakeEl.destroy() in gltf-model-plus remove function.\n * - Because FakeEntity is not a DOM element, you can't use this.el.querySelector API.\n * - You can't use document.querySelectorAll('[waypoint]')) to find all waypoint component set on a FakeEntity either.\n *\n * This implementation has been tested with the following components: gltf-model uv-scroll reflection-probe waypoint/networked\n * but we currently don't use it for waypoint/networked because of compatibility with raycaster and querySelector\n */\nexport class FakeEntity extends EventDispatcher {\n  constructor(node) {\n    super();\n    this.components = {};\n    // To avoid double initializations and infinite loops.\n    this.initializingComponents = {};\n    this.object3D = node;\n    this.sceneEl = node.el.sceneEl; // node.el at this point is a a-entity where we loaded the glb\n    this.object3D.el = this; // override node.el with this FakeEntity instance\n    this.isEntity = true; // used for raycaster refreshObjects\n    this.isPlaying = true; // true by default, we don't implement the play/pause logic on this FakeEntity implementation\n    this.object3DMap = {};\n    this.rotationObj = {};\n    this.states = [];\n    // networked component needs parentElement and getAttribute('networked') to set\n    // syncData.parent = this.getParentId();\n    // we don't really support networked parent here, so setting them to sceneEl\n    this.parentElement = this.sceneEl;\n    // networked and networked-audio-source components verify if the entity wasn't removed by checking this.el.parentNode\n    // NAF also have this code\n    // entity.parentNode.removeChild(entity)\n    // that is executed via NAF.connection.disconnect() that calls this.entities.removeRemoteEntities()\n    // so setting a dummy object with removeChild to make them happy.\n    this.parentNode = FAKE_NODE;\n\n    // variables defined by a-node api that are used by the component api\n    this.hasLoaded = true;\n    this.mixinEls = [];\n    this.tagName = \"FAKE_ENTITY\";\n    this.isFakeEntity = true;\n  }\n\n  get children() {\n    throw Error(\"FakeEntity el.children not implemented, try another way, maybe el.object3D.children\");\n  }\n\n  // get parentNode() {\n  //   throw Error(\"FakeEntity el.parentNode not implemented, try another way, maybe el.object3D.parent\");\n  // }\n\n  addState(state) {\n    if (this.is(state)) {\n      return;\n    }\n    this.states.push(state);\n    this.emit(\"stateadded\", state);\n  }\n\n  removeState(state) {\n    const stateIndex = this.states.indexOf(state);\n    if (stateIndex === -1) {\n      return;\n    }\n    this.states.splice(stateIndex, 1);\n    this.emit(\"stateremoved\", state);\n  }\n\n  /**\n   * Checks if the element is in a given state. e.g. el.is('alive');\n   * @type {string} state - Name of the state we want to check\n   */\n  is(state) {\n    return this.states.indexOf(state) !== -1;\n  }\n\n  getAttribute(attr) {\n    if (attr === \"position\") {\n      return this.object3D.position;\n    }\n    if (attr === \"rotation\") {\n      return getRotation(this);\n    }\n    if (attr === \"scale\") {\n      return this.object3D.scale;\n    }\n    if (attr === \"visible\") {\n      return this.object3D.visible;\n    }\n    if (attr === \"class\" || attr === \"mixin\") {\n      console.warn(`FakeEntity el.getAttribute('${attr}') called`, this.object3D);\n      return \"\";\n    }\n    // If component, return component data.\n    const component = this.components[attr];\n    if (component) {\n      return component.data;\n    }\n    throw Error(`FakeEntity el.getAttribute('${attr}') not implemented`);\n  }\n\n  getDOMAttribute(attr) {\n    console.warn(`FakeEntity el.getDOMAttribute('${attr}') called`, this.object3D);\n    return \"\";\n  }\n\n  flushToDOM() {\n    // do nothing\n  }\n\n  removeAttribute() {\n    throw Error(\"FakeEntity el.removeAttribute not implemented\");\n  }\n\n  /**\n   * setAttribute can:\n   *\n   * 1. Set a single property of a multi-property component.\n   * 2. Set multiple properties of a multi-property component.\n   * 3. Replace properties of a multi-property component.\n   * 4. Set a value for a single-property component, ~~mixin, or normal HTML attribute~~.\n   *\n   * @param {string} attrName - Component ~~or attribute~~ name.\n   * @param {*} arg1 - Can be a value, property name, CSS-style property string, or\n   *   object of properties.\n   * @param {*|bool} arg2 - If arg1 is a property name, this should be a value. Otherwise,\n   *   it is a boolean indicating whether to clobber previous values (defaults to false).\n   */\n  setAttribute(componentName, arg1, arg2) {\n    if (componentName.indexOf(MULTIPLE_COMPONENT_DELIMITER) > -1) {\n      throw Error(\n        `FakeEntity setAttribute(\"${componentName}\", ...) using multiple components of the same type is not supported`\n      );\n    }\n    if (!AFRAME.components[componentName]) {\n      if (componentName === \"id\") {\n        // networked component is setting the id to be the same as networkId\n        this.id = arg1;\n        return;\n      }\n      throw Error(`FakeEntity setAttribute(\"${componentName}\", ...) not supported, this is not a registered component`);\n    }\n\n    let newAttrValue, clobber;\n    // Determine new attributes from the arguments\n    if (\n      typeof arg2 !== \"undefined\" &&\n      typeof arg1 === \"string\" &&\n      arg1.length > 0 &&\n      typeof AFRAME.utils.styleParser.parse(arg1) === \"string\"\n    ) {\n      // Update a single property of a multi-property component\n      for (const key in singlePropUpdate) {\n        delete singlePropUpdate[key];\n      }\n      newAttrValue = singlePropUpdate;\n      newAttrValue[arg1] = arg2;\n      clobber = false;\n    } else {\n      // Update with a value, object, or CSS-style property string, with the possiblity\n      // of clobbering previous values.\n      newAttrValue = arg1;\n      clobber = arg2 === true;\n    }\n\n    this.updateComponent(componentName, newAttrValue, clobber);\n  }\n\n  updateComponent(attr, attrValue, clobber) {\n    const component = this.components[attr];\n\n    if (component) {\n      // Remove component.\n      // if (attrValue === null && !checkComponentDefined(this, attr)) {\n      if (attrValue === null) {\n        this.removeComponent(attr, true);\n        return;\n      }\n      // Component already initialized. Update component.\n      component.updateProperties(attrValue, clobber);\n      return;\n    }\n\n    // Component not yet initialized. Initialize component.\n    this.initComponent(attr, attrValue, false);\n  }\n\n  /**\n   * Initialize component.\n   *\n   * @param {string} attrName - Attribute name associated to the component.\n   * @param {object} data - Component data\n   * @param {boolean} isDependency - True if the component is a dependency.\n   */\n  // eslint-disable-next-line\n  initComponent(attrName, data, isDependency) {\n    addComponent(this.object3D, attrName, data);\n  }\n\n  removeComponent(name, destroy) {\n    const component = this.components[name];\n    if (!component) {\n      return;\n    }\n\n    // Wait for component to initialize.\n    if (!component.initialized) {\n      this.addEventListener(\"componentinitialized\", function tryRemoveLater(evt) {\n        if (evt.detail.name !== name) {\n          return;\n        }\n        this.removeComponent(name, destroy);\n        this.removeEventListener(\"componentinitialized\", tryRemoveLater);\n      });\n      return;\n    }\n\n    component.pause();\n    component.remove();\n\n    // Keep component attached to entity in case of just full entity detach.\n    if (destroy) {\n      component.destroy();\n      delete this.components[name];\n    }\n\n    this.emit(\"componentremoved\", component.evtDetail, false);\n  }\n\n  getObject3D(type) {\n    return this.object3DMap[type];\n  }\n\n  /**\n   * Set a THREE.Object3D into the map.\n   *\n   * @param {string} type - Developer-set name of the type of object, will be unique per type.\n   * @param {object} obj - A THREE.Object3D.\n   */\n  setObject3D(type, obj) {\n    // Remove existing object of the type.\n    const oldObj = this.getObject3D(type);\n    if (oldObj) {\n      this.object3D.remove(oldObj);\n    }\n\n    // Set references to this fake entity.\n    obj.el = this;\n    const self = this;\n    if (obj.children.length) {\n      obj.traverse(function bindEl(child) {\n        child.el = self;\n      });\n    }\n\n    // Add.\n    if (obj !== this.object3D) {\n      this.object3D.add(obj);\n    }\n    this.object3DMap[type] = obj;\n    this.emit(\"object3dset\", { object: obj, type: type });\n  }\n\n  /**\n   * Remove object from scene and entity object3D map.\n   */\n  removeObject3D(type) {\n    const obj = this.getObject3D(type);\n    if (!obj) {\n      console.warn(\"Tried to remove `Object3D` of type:\", type, \"which was not defined.\");\n      return;\n    }\n    this.object3D.remove(obj);\n    delete this.object3DMap[type];\n    this.emit(\"object3dremove\", { type: type });\n  }\n\n  emit(name, detail, bubbles, extraData) {\n    if (bubbles === undefined) {\n      bubbles = true;\n    }\n    let data = eventData;\n    data.bubbles = !!bubbles;\n    data.detail = detail;\n\n    // If extra data is present, we need to create a new object.\n    if (extraData) {\n      data = AFRAME.utils.extend({}, extraData, data);\n    }\n\n    // In the default EventDispatcher implementation, dispatchEvent was setting target attribute on the event\n    // but we got an error with CustomEvent instance being readonly. So we're setting it in data first\n    // before creating the CustomEvent.\n    data.target = this;\n    this.dispatchEvent(new CustomEvent(name, data));\n    // And we reset target to null to be sure to not keep a reference to `this` for the garbage collector to work properly.\n    data.target = null;\n  }\n\n  destroy() {\n    for (const name in this.components) {\n      this.removeComponent(name, true);\n    }\n    this.object3D.el = null;\n    this.object3D = null;\n    this.sceneEl = null;\n    this.parentElement = null;\n    this.parentNode = null;\n  }\n}\n","/* global AFRAME, THREE */\nimport { RGBELoader } from \"three/addons/loaders/RGBELoader.js\";\nimport { gltfInflators } from \"../inflators\";\n\nconst HDR_FILE_RE = /\\.hdr$/;\n\nconst absoluteURLForAsset =\n  window.absoluteURLForAsset ||\n  ((asset) => {\n    return asset;\n  });\n\n// same defaults as the defaultEnvironmentSettings function\nAFRAME.registerComponent(\"environment-settings\", {\n  schema: {\n    toneMapping: {\n      type: \"string\",\n      default: \"LUTToneMapping\",\n      oneOf: [\n        \"NoToneMapping\",\n        \"LinearToneMapping\",\n        \"ReinhardToneMapping\",\n        \"CineonToneMapping\",\n        \"ACESFilmicToneMapping\",\n        \"CustomToneMapping\",\n        \"LUTToneMapping\",\n      ],\n    },\n    toneMappingExposure: {\n      type: \"number\",\n      default: 1,\n    },\n    backgroundTexture: {\n      type: \"string\",\n      default: \"\",\n    },\n    backgroundColor: {\n      type: \"color\",\n      default: \"skyblue\",\n    },\n    envMapTexture: {\n      type: \"string\",\n      default: \"\",\n    },\n  },\n  init() {\n    (async () => {\n      let backgroundTexture = null;\n      if (this.data.backgroundTexture) {\n        const backgroundTextureUrl = absoluteURLForAsset(this.data.backgroundTexture);\n        const isHDR = HDR_FILE_RE.test(backgroundTextureUrl);\n        let loader;\n        if (isHDR) {\n          loader = new RGBELoader().setDataType(THREE.HalfFloatType);\n        } else {\n          loader = new THREE.TextureLoader();\n        }\n\n        loader.setWithCredentials(false);\n        backgroundTexture = await new Promise((resolve, reject) =>\n          loader.load(backgroundTextureUrl, resolve, undefined, reject)\n        );\n        if (\n          backgroundTexture.minFilter === THREE.NearestMipmapNearestFilter ||\n          backgroundTexture.minFilter === THREE.NearestMipmapLinearFilter\n        ) {\n          backgroundTexture.minFilter = THREE.NearestFilter;\n        } else if (\n          backgroundTexture.minFilter === THREE.LinearMipmapNearestFilter ||\n          backgroundTexture.minFilter === THREE.LinearMipmapLinearFilter\n        ) {\n          backgroundTexture.minFilter = THREE.LinearFilter;\n        }\n\n        if (!isHDR) {\n          backgroundTexture.encoding = THREE.sRGBEncoding;\n        }\n      }\n\n      let envMapTexture = null;\n      if (this.data.envMapTexture) {\n        const envMapTextureUrl = absoluteURLForAsset(this.data.envMapTexture);\n        const isHDR = HDR_FILE_RE.test(envMapTextureUrl);\n        let loader;\n        if (isHDR) {\n          loader = new RGBELoader().setDataType(THREE.HalfFloatType);\n        } else {\n          loader = new THREE.TextureLoader();\n        }\n\n        loader.setWithCredentials(false);\n        envMapTexture = await new Promise((resolve, reject) =>\n          loader.load(envMapTextureUrl, resolve, undefined, reject)\n        );\n        if (\n          envMapTexture.minFilter === THREE.NearestMipmapNearestFilter ||\n          envMapTexture.minFilter === THREE.NearestMipmapLinearFilter\n        ) {\n          envMapTexture.minFilter = THREE.NearestFilter;\n        } else if (\n          envMapTexture.minFilter === THREE.LinearMipmapNearestFilter ||\n          envMapTexture.minFilter === THREE.LinearMipmapLinearFilter\n        ) {\n          envMapTexture.minFilter = THREE.LinearFilter;\n        }\n\n        if (!isHDR) {\n          envMapTexture.encoding = THREE.sRGBEncoding;\n        }\n      }\n\n      const settings = {\n        toneMapping: this.data.toneMapping,\n        toneMappingExposure: this.data.toneMappingExposure,\n        backgroundTexture: backgroundTexture,\n        backgroundColor: this.data.backgroundColor,\n        envMapTexture: envMapTexture,\n      };\n      gltfInflators.get(\"environment-settings\")(this.el.sceneEl, settings);\n    })();\n  },\n});\n","/* global AFRAME, NAF, THREE */\nimport { RGBELoader } from \"three/addons/loaders/RGBELoader.js\";\nimport { defaultEnvironmentSettings } from \"../inflators/environment-settings\";\nimport { gltfInflators } from \"../inflators\";\n\nclass GLTFMozTextureRGBE {\n  constructor(parser, loader) {\n    this.parser = parser;\n    this.loader = loader;\n    this.name = \"MOZ_texture_rgbe\";\n  }\n\n  loadTexture(textureIndex) {\n    const parser = this.parser;\n    const json = parser.json;\n    const textureDef = json.textures[textureIndex];\n\n    if (!textureDef.extensions || !textureDef.extensions[this.name]) {\n      return null;\n    }\n\n    const extensionDef = textureDef.extensions[this.name];\n    const source = extensionDef.source;\n\n    return parser\n      .loadTextureImage(textureIndex, source, this.loader)\n      .then((t) => {\n        // TODO pretty severe artifacting when using mipmaps, disable for now\n        if (t.minFilter === THREE.NearestMipmapNearestFilter || t.minFilter === THREE.NearestMipmapLinearFilter) {\n          t.minFilter = THREE.NearestFilter;\n        } else if (t.minFilter === THREE.LinearMipmapNearestFilter || t.minFilter === THREE.LinearMipmapLinearFilter) {\n          t.minFilter = THREE.LinearFilter;\n        }\n        return t;\n      })\n      .catch((error) => {\n        console.error(\"issue while loading hdr texture\", error);\n      });\n  }\n}\n\nexport function mapMaterials(object3D, fn) {\n  if (!object3D.material) return [];\n\n  if (Array.isArray(object3D.material)) {\n    return object3D.material.map(fn);\n  } else {\n    return [fn(object3D.material)];\n  }\n}\n\nclass GLTFHubsComponentsExtension {\n  constructor(parser) {\n    this.parser = parser;\n    this.name = \"MOZ_hubs_components\";\n  }\n\n  afterRoot({ scenes, parser }) {\n    const deps = [];\n\n    const resolveComponents = (gltfRootType, obj) => {\n      const idx = parser.associations.get(obj)?.[gltfRootType];\n      // parser.associations.get(obj) will be undefined if you have two scenes in the gltf because of\n      // parser.associations = reduceAssociations( scene );\n      // line causing parser.associations to be cleaned when loading the second scene.\n      // https://github.com/mrdoob/three.js/blob/c965d3b5dcab2575d6a73aec583c29fa44c0c60d/examples/jsm/loaders/GLTFLoader.js#L4373\n      // console.log(obj.name, parser.associations.get(obj), gltfRootType, idx, parser.json[gltfRootType][idx]);\n      // Empty undefined nodes undefined undefined\n      // Be sure to export with \"Include / Active Scene\" checked in blender to have only one scene in the gltf\n      if (idx === undefined) return;\n      const ext = parser.json[gltfRootType][idx].extensions?.[this.name];\n\n      if (!ext) return;\n      // console.log(obj.name, { ext });\n\n      // TODO putting this into userData is a bit silly, we should just inflate here, but entities need to be inflated first...\n      obj.userData.gltfExtensions = Object.assign(obj.userData.gltfExtensions || {}, {\n        MOZ_hubs_components: ext,\n      });\n\n      for (const componentName in ext) {\n        const props = ext[componentName];\n        for (const propName in props) {\n          const value = props[propName];\n          const type = value?.__mhc_link_type;\n          if (type && value.index !== undefined) {\n            deps.push(\n              parser.getDependency(type, value.index).then((loadedDep) => {\n                // TODO similar to above, this logic being spread out in multiple places is not great...\n                // Node refences are assumed to always be in the scene graph. These referneces are late-resolved in inflateComponents\n                // otherwise they will need to be updated when cloning (which happens as part of caching).\n                if (type === \"node\") return;\n\n                if (type === \"texture\" && !parser.json.textures[value.index].extensions?.MOZ_texture_rgbe) {\n                  // For now assume all non HDR textures linked in hubs components are sRGB.\n                  // We can allow this to be overriden later if needed\n                  loadedDep.encoding = THREE.sRGBEncoding;\n                }\n\n                props[propName] = loadedDep;\n\n                return loadedDep;\n              })\n            );\n          }\n        }\n      }\n    };\n\n    // object.userData.gltfExtensions.MOZ_hubs_components is not set because we have a plugin registered for MOZ_hubs_components\n    // https://github.com/mrdoob/three.js/blob/c965d3b5dcab2575d6a73aec583c29fa44c0c60d/examples/jsm/loaders/GLTFLoader.js#L2330-L2335\n    // called here\n    // https://github.com/mrdoob/three.js/blob/c965d3b5dcab2575d6a73aec583c29fa44c0c60d/examples/jsm/loaders/GLTFLoader.js#L4264\n    // that's why we traverse all scenes, nodes, materials to set MOZ_hubs_components\n    // Actually we're only interested by transforming envMapTexture and backgroundTexture for scene MOZ_hubs_components.environment-settings\n    // and reflection probes textures\n    for (let i = 0; i < scenes.length; i++) {\n      // TODO this should be done by GLTLoader\n      parser.associations.set(scenes[i], { scenes: i });\n      scenes[i].traverse((obj) => {\n        resolveComponents(\"scenes\", obj);\n        resolveComponents(\"nodes\", obj);\n        mapMaterials(obj, resolveComponents.bind(this, \"materials\"));\n      });\n    }\n\n    return Promise.all(deps);\n  }\n}\n\nclass GLTFHubsLightMapExtension {\n  constructor(parser) {\n    this.parser = parser;\n    this.name = \"MOZ_lightmap\";\n  }\n\n  // @TODO: Ideally we should use extendMaterialParams hook.\n  //        But the current official glTF loader doesn't fire extendMaterialParams\n  //        hook for unlit and specular-glossiness materials.\n  //        So using loadMaterial hook as workaround so far.\n  //        Cons is loadMaterial hook is fired as _invokeOne so\n  //        if other plugins defining loadMaterial is registered\n  //        there is a chance that this light map extension handler isn't called.\n  //        The glTF loader should be updated to remove the limitation.\n  loadMaterial(materialIndex) {\n    const parser = this.parser;\n    const json = parser.json;\n    const materialDef = json.materials[materialIndex];\n    if (!materialDef.extensions || !materialDef.extensions[this.name]) {\n      return null;\n    }\n\n    const extensionDef = materialDef.extensions[this.name];\n\n    const pending = [];\n    pending.push(parser.loadMaterial(materialIndex));\n    pending.push(parser.getDependency(\"texture\", extensionDef.index));\n\n    return Promise.all(pending)\n      .then((results) => {\n        const material = results[0];\n        const lightMap = results[1];\n        material.lightMap = lightMap;\n        material.lightMapIntensity = extensionDef.intensity !== undefined ? extensionDef.intensity : 1;\n        if (material.isMeshBasicMaterial) {\n          material.lightMapIntensity *= Math.PI;\n        }\n        return material;\n      })\n      .catch((error) => {\n        console.error(\"issue while loading MOZ_lightmap material\", error);\n      });\n  }\n}\n\nfunction disposeTextures(material) {\n  // Explicitly dispose any textures assigned to this material\n  for (const propertyName in material) {\n    const texture = material[propertyName];\n    if (texture instanceof THREE.Texture) {\n      const image = texture.source.data;\n      if (image instanceof ImageBitmap) {\n        image.close && image.close();\n      }\n      texture.dispose();\n    }\n  }\n}\n\nexport function disposeNode(node) {\n  if (node.fakeEl) {\n    node.fakeEl.destroy();\n  }\n  if (node instanceof THREE.Mesh) {\n    const geometry = node.geometry;\n    if (geometry) {\n      geometry.dispose();\n    }\n\n    const material = node.material;\n    if (material) {\n      if (Array.isArray(material)) {\n        for (let i = 0, l = material.length; i < l; i++) {\n          const m = material[i];\n          disposeTextures(m);\n          m.dispose();\n        }\n      } else {\n        disposeTextures(material);\n        material.dispose(); // disposes any programs associated with the material\n      }\n    }\n  }\n}\nexport const gltfModelPlus = {\n  schema: { type: \"model\" },\n\n  init: function () {\n    const self = this;\n    const dracoLoader = this.el.sceneEl.systems[\"gltf-model\"].getDRACOLoader();\n    const meshoptDecoder = this.el.sceneEl.systems[\"gltf-model\"].getMeshoptDecoder();\n    const ktxLoader = this.el.sceneEl.systems[\"gltf-model\"].getKTX2Loader();\n    this.model = null;\n    this.removers = [];\n    this.loader = new THREE.GLTFLoader();\n    this.mixer = null;\n    this.loader\n      .register((parser) => new GLTFHubsComponentsExtension(parser))\n      .register((parser) => new GLTFHubsLightMapExtension(parser))\n      .register((parser) => new GLTFMozTextureRGBE(parser, new RGBELoader().setDataType(THREE.HalfFloatType)));\n    if (dracoLoader) {\n      this.loader.setDRACOLoader(dracoLoader);\n    }\n    if (meshoptDecoder) {\n      this.ready = meshoptDecoder.then(function (meshoptDecoder) {\n        self.loader.setMeshoptDecoder(meshoptDecoder);\n      });\n    } else {\n      this.ready = Promise.resolve();\n    }\n    if (ktxLoader) {\n      this.loader.setKTX2Loader(ktxLoader);\n    }\n  },\n\n  update: function () {\n    const self = this;\n    const el = this.el;\n    const src = this.data;\n\n    this.remove();\n\n    if (!src) {\n      return;\n    }\n\n    this.ready.then(function () {\n      self.el.emit(\"model-loading\", { src });\n      self.loader.load(\n        src,\n        function gltfLoaded(gltfModel) {\n          el.emit(\"model-downloaded\");\n          self.model = gltfModel.scene || gltfModel.scenes[0];\n          self.model.animations = gltfModel.animations;\n          el.setObject3D(\"mesh\", self.model);\n\n          // Handle Hubs components\n          const animations = gltfModel.animations;\n          const finalizers = [];\n          let environmentSettings = null;\n          gltfModel.scene.traverse((node) => {\n            if (node.isMesh) {\n              node.reflectionProbeMode = \"static\";\n            }\n\n            if (node.userData.gltfExtensions && node.userData.gltfExtensions.MOZ_hubs_components) {\n              const hubsComponents = node.userData.gltfExtensions.MOZ_hubs_components;\n              console.log(src, hubsComponents, node.name);\n              Object.entries(hubsComponents).forEach(([componentName, componentProps]) => {\n                if (componentName === \"environment-settings\") {\n                  environmentSettings = componentProps;\n                } else if (componentName === \"visible\") {\n                  node.visible = componentProps.visible;\n                } else if (componentName === \"networked\") {\n                  // ignore, handled in other inflators\n                } else if (componentName === \"loop-animation\") {\n                  if (!self.mixer) {\n                    self.mixer = new THREE.AnimationMixer(gltfModel.scene);\n                    // add tick\n                    self.tick = function (t, dt) {\n                      if (self.mixer && !isNaN(dt)) self.mixer.update(dt / 1000);\n                    };\n                    self.el.sceneEl.addBehavior(self);\n                  }\n                  const activeClipIndices = componentProps.activeClipIndices;\n                  let clips = [];\n                  if (activeClipIndices && activeClipIndices.length > 0) {\n                    // Support for Spoke->Hubs activeClipIndices struct\n                    clips = activeClipIndices.map((index) => animations[index]);\n                  } else {\n                    // Support for Blender imports with { clip: 'train', paused: false} struct.\n                    const clipName = componentProps.clip;\n                    if (clipName !== \"\") {\n                      const clipNames = clipName.split(\",\");\n                      for (let i = 0; i < clipNames.length; i++) {\n                        const n = clipNames[i];\n                        const a = animations.find(({ name }) => name === n);\n                        if (a) {\n                          clips.push(a);\n                        } else {\n                          console.warn(`Could not find animation named '${n}'`);\n                        }\n                      }\n                    }\n                  }\n\n                  for (let i = 0; i < clips.length; i++) {\n                    const action = self.mixer.clipAction(clips[i], node);\n                    action.enabled = true;\n                    action.setLoop(THREE.LoopRepeat, Infinity).play();\n                  }\n                } else {\n                  const inflator = gltfInflators.get(componentName);\n                  if (inflator) {\n                    // Create entity and move node to a different parent when we're done traversing the scene\n                    finalizers.push(() => {\n                      const entity = inflator(node, componentProps, hubsComponents);\n                      if (entity) {\n                        self.removers.push(() => {\n                          entity.object3D.traverse(disposeNode);\n                          if (entity.parentNode) entity.parentNode.removeChild(entity);\n                          if (componentName === \"nav-mesh\") {\n                            // Temporary until we add child-attached/child-detached support in simple-navmesh-constraint\n                            // https://github.com/networked-aframe/naf-valid-avatars/issues/28\n                            const cameraRig = document.querySelector(\"#rig,#cameraRig\");\n                            cameraRig?.removeAttribute(\"simple-navmesh-constraint\");\n                          }\n                        });\n                      }\n                    });\n                  } else {\n                    console.warn(`Unknown Hubs component '${componentName}'`);\n                  }\n                }\n              });\n            }\n          });\n\n          if (!environmentSettings) {\n            environmentSettings = defaultEnvironmentSettings;\n          }\n\n          if (self.el.classList.contains(\"environment-settings\")) {\n            gltfInflators.get(\"environment-settings\")(self.el.sceneEl, environmentSettings);\n          }\n\n          for (let i = 0; i < finalizers.length; i++) {\n            finalizers[i]();\n          }\n          finalizers.length = 0;\n\n          el.emit(\"model-loaded\", { format: \"gltf\", model: self.model, environmentSettings });\n          setTimeout(() => {\n            el.sceneEl.renderer.shadowMap.needsUpdate = true;\n          }, 2000);\n        },\n        function onProgress(evt) {\n          el.emit(\"progress\", { originalEvent: evt });\n        },\n        function gltfFailed(error) {\n          el.emit(\"model-downloaded\");\n          console.error(error, src);\n          const message = error && error.message ? error.message : \"Failed to load glTF model\";\n          console.warn(message);\n          el.emit(\"model-error\", { format: \"gltf\", src: src });\n        }\n      );\n    });\n  },\n\n  remove: function () {\n    if (!this.model) {\n      return;\n    }\n\n    if (this.mixer) {\n      this.mixer.stopAllAction();\n      this.mixer = null;\n      // remove tick\n      this.el.sceneEl.removeBehavior(this);\n      this.tick = undefined;\n    }\n\n    for (let i = 0; i < this.removers.length; i++) {\n      this.removers[i]();\n    }\n    this.removers.length = 0;\n\n    this.el.removeObject3D(\"mesh\");\n    this.model.traverse(disposeNode);\n    this.model = null;\n  },\n};\n\nAFRAME.registerComponent(\"gltf-model-plus\", gltfModelPlus);\n","/* global AFRAME, THREE */\nconst registeredMediaframes = [];\nconst mediaFramesById = new Map();\n\nAFRAME.registerSystem(\"media-frame\", {\n  getClosestMediaFrame: function (filterByMediaType) {\n    let mediaFrames = registeredMediaframes;\n    if (filterByMediaType && filterByMediaType !== \"all\") {\n      if (filterByMediaType === \"all-2d\") {\n        mediaFrames = mediaFrames.filter((mediaFrame) => {\n          const mediaType = mediaFrame.component.data.mediaType;\n          return mediaType !== \"model\";\n        });\n      } else {\n        if (filterByMediaType === \"model\") {\n          mediaFrames = mediaFrames.filter((mediaFrame) => {\n            const mediaType = mediaFrame.component.data.mediaType;\n            return mediaType === filterByMediaType || mediaType === \"all\";\n          });\n        } else {\n          mediaFrames = mediaFrames.filter((mediaFrame) => {\n            const mediaType = mediaFrame.component.data.mediaType;\n            return mediaType === filterByMediaType || mediaType === \"all\" || mediaType === \"all-2d\";\n          });\n        }\n      }\n    }\n    const cameraRigPosition = document.querySelector(\"#rig,#cameraRig\").object3D.position;\n    // Note: assumption that object3D.position is global world coordinate here\n    mediaFrames.sort((a, b) => {\n      if (a.el.object3D.position.distanceTo(cameraRigPosition) < b.el.object3D.position.distanceTo(cameraRigPosition)) {\n        return -1;\n      }\n      return 1;\n    });\n    if (mediaFrames.length > 0) {\n      return mediaFrames[0];\n    }\n    return document.getElementById(\"screenshare\"); // TODO remove this hard coded value\n  },\n  getMediaFrameById(id) {\n    const mediaFrame = mediaFramesById.get(id);\n    if (!mediaFrame) return document.getElementById(\"screenshare\"); // TODO remove this hard coded value\n    return mediaFrame.el;\n  },\n});\n\n/**\n * Define a location where you can put 2d or 3d elements\n * @component media-frame\n */\nexport const mediaFrameComponent = AFRAME.registerComponent(\"media-frame\", {\n  schema: {\n    bounds: { type: \"vec3\", default: { x: 1, y: 1, z: 1 } },\n    mediaType: { type: \"string\", oneOf: [\"all\", \"all-2d\", \"model\", \"image\", \"video\", \"pdf\"], default: \"all-2d\" },\n    snapToCenter: { type: \"boolean\", default: true },\n  },\n  play() {\n    const id = this.el.components.networked.data.networkId;\n    const instance = { component: this, el: this.el, id };\n    this.instance = instance;\n    mediaFramesById.set(id, instance);\n    registeredMediaframes.push(instance);\n  },\n\n  pause() {\n    mediaFramesById.delete(this.instance.id);\n    registeredMediaframes.splice(registeredMediaframes.indexOf(this.instance), 1);\n  },\n});\n","AFRAME.registerComponent(\"reflection-probe\", {\n  schema: {\n    size: { default: 1 },\n    envMapTexture: { type: \"map\" },\n  },\n\n  init: function () {\n    this.el.object3D.updateWorldMatrix(true, false);\n\n    const box = new THREE.Box3()\n      .setFromCenterAndSize(new THREE.Vector3(), new THREE.Vector3().setScalar(this.data.size * 2))\n      .applyMatrix4(this.el.object3D.matrixWorld);\n\n    this.el.setObject3D(\"probe\", new THREE.ReflectionProbe(box, this.data.envMapTexture));\n\n    // if (this.el.sceneEl.systems[\"hubs-systems\"].environmentSystem.debugMode) {\n    //   const debugBox = new THREE.Box3().setFromCenterAndSize(\n    //     new THREE.Vector3(),\n    //     new THREE.Vector3().setScalar(this.data.size * 2)\n    //   );\n    //   this.el.setObject3D(\n    //     \"helper\",\n    //     new THREE.Box3Helper(debugBox, new THREE.Color(Math.random(), Math.random(), Math.random()))\n    //   );\n    // }\n  },\n});\n","/* global AFRAME, THREE */\n// This is a modified copy of https://github.com/mozilla/hubs/blob/b466e6901cb2a0310b5219e2dac41731d7fa0916/src/components/simple-water.js\n// and https://github.com/mozilla/hubs/blob/f099ec6cb9a15c8f7554ffdbec592f9abf6c7267/src/objects/SimpleWaterMesh.ts\n// and https://github.com/mozilla/hubs/blob/c734c4d8c09a4969ea7793de9e500f3b39cc9a8e/src/assets/waternormals.jpg\n// Changes required was removing typescript annotations, removing APP.store.state.preferences.materialQualitySetting usage and replacing HubsTextureLoader by TextureLoader.\n// @license MPL 2.0 https://github.com/mozilla/hubs/blob/master/LICENSE\n\nimport {\n  Mesh,\n  PlaneGeometry,\n  MeshStandardMaterial,\n  MeshPhongMaterial,\n  Vector2,\n  RepeatWrapping,\n  TextureLoader,\n} from \"three\";\nimport { SimplexNoise } from \"three/addons/math/SimplexNoise.js\";\nimport waterNormalsUrl from \"../assets/waternormals.jpg\";\n\n/**\n * SimpleWater\n */\n\n/**\n * Adapted dynamic geometry code from: https://github.com/ditzel/UnityOceanWavesAndShip\n */\n\nclass Octave {\n  constructor(speed = new Vector2(1, 1), scale = new Vector2(1, 1), height = 0.0025, alternate = true) {\n    this.speed = speed;\n    this.scale = scale;\n    this.height = height;\n    this.alternate = alternate;\n  }\n}\nexport default class SimpleWater extends Mesh {\n  constructor(normalMap, resolution = 24, lowQuality = false) {\n    const geometry = new PlaneGeometry(10, 10, resolution, resolution);\n    geometry.rotateX(-Math.PI / 2);\n\n    const waterUniforms = {\n      ripplesSpeed: { value: 0.25 },\n      ripplesScale: { value: 1 },\n      time: { value: 0 },\n    };\n\n    const MaterialClass = lowQuality ? MeshPhongMaterial : MeshStandardMaterial;\n\n    normalMap.wrapS = normalMap.wrapT = RepeatWrapping;\n\n    const material = new MaterialClass({ color: 0x0054df, normalMap, roughness: 0.5, metalness: 0.5 });\n    material.name = \"SimpleWaterMaterial\";\n\n    material.onBeforeCompile = (shader) => {\n      Object.assign(shader.uniforms, waterUniforms);\n\n      shader.vertexShader = shader.vertexShader.replace(\n        \"#include <fog_pars_vertex>\",\n        `\n        #include <fog_pars_vertex>\n        varying vec3 vWPosition;\n      `\n      );\n\n      shader.vertexShader = shader.vertexShader.replace(\n        \"#include <fog_vertex>\",\n        `\n        #include <fog_vertex>\n        vWPosition = ( modelMatrix * vec4( transformed, 1.0 ) ).xyz;\n      `\n      );\n\n      // getNoise function from https://github.com/mrdoob/three.js/blob/dev/examples/jsm/objects/Water.js\n      shader.fragmentShader = shader.fragmentShader.replace(\n        \"#include <normalmap_pars_fragment>\",\n        `\n        #include <normalmap_pars_fragment>\n\n        uniform float time;\n        uniform float ripplesSpeed;\n        uniform float ripplesScale;\n      \n        varying vec3 vWPosition;\n      \n        vec4 getNoise(vec2 uv){\n          float timeOffset = time * ripplesSpeed;\n          uv = (uv - 0.5) * (1.0 / ripplesScale);\n          vec2 uv0 = (uv/103.0)+vec2(timeOffset/17.0, timeOffset/29.0);\n          vec2 uv1 = uv/107.0-vec2(timeOffset/-19.0, timeOffset/31.0);\n          vec2 uv2 = uv/vec2(897.0, 983.0)+vec2(timeOffset/101.0, timeOffset/97.0);\n          vec2 uv3 = uv/vec2(991.0, 877.0)-vec2(timeOffset/109.0, timeOffset/-113.0);\n          vec4 noise = (texture2D(normalMap, uv0)) +\n                       (texture2D(normalMap, uv1)) +\n                       (texture2D(normalMap, uv2)) +\n                       (texture2D(normalMap, uv3));\n          return noise / 4.0;\n        }\n      `\n      );\n\n      // https://github.com/mrdoob/three.js/blob/dev/src/renderers/shaders/ShaderChunk/normalmap_pars_fragment.glsl.js#L20\n      shader.fragmentShader = shader.fragmentShader.replace(\n        \"#include <normal_fragment_maps>\",\n        `\n          // Workaround for Adreno 3XX dFd*( vec3 ) bug. See #9988\n\n          vec3 eye_pos = -vViewPosition;\n          vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n          vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n          vec2 st0 = dFdx( vUv.st );\n          vec2 st1 = dFdy( vUv.st );\n\n          float scale = sign( st1.t * st0.s - st0.t * st1.s ); // we do not care about the magnitude\n\n          vec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n          vec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n          vec3 N = normalize( normal );\n          mat3 tsn = mat3( S, T, N );\n\n          vec3 mapN = getNoise(vWPosition.xz).xyz * 2.0 - 1.0;\n\n          mapN.xy *= normalScale;\n          mapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\n          normal = normalize( tsn * mapN );\n        `\n      );\n    };\n\n    super(geometry, material);\n\n    this.lowQuality = lowQuality;\n    this.waterUniforms = waterUniforms;\n\n    if (lowQuality) {\n      this.material.specular.set(0xffffff);\n    } else {\n      this.receiveShadow = true;\n    }\n\n    this.geometry.attributes.position.dynamic = true;\n\n    this.resolution = resolution;\n    this.octaves = [\n      new Octave(new Vector2(0.5, 0.5), new Vector2(1, 1), 0.01, true),\n      new Octave(new Vector2(0.05, 6), new Vector2(1, 20), 0.1, false),\n    ];\n\n    this.simplex = new SimplexNoise();\n  }\n\n  get opacity() {\n    return this.material.opacity;\n  }\n\n  set opacity(value) {\n    this.material.opacity = value;\n    this.material.transparent = value !== 1;\n  }\n\n  get color() {\n    return this.material.color;\n  }\n\n  get tideHeight() {\n    return this.octaves[0].height;\n  }\n\n  set tideHeight(value) {\n    this.octaves[0].height = value;\n  }\n\n  get tideScale() {\n    return this.octaves[0].scale;\n  }\n\n  get tideSpeed() {\n    return this.octaves[0].speed;\n  }\n\n  get waveHeight() {\n    return this.octaves[1].height;\n  }\n\n  set waveHeight(value) {\n    this.octaves[1].height = value;\n  }\n\n  get waveScale() {\n    return this.octaves[1].scale;\n  }\n\n  get waveSpeed() {\n    return this.octaves[1].speed;\n  }\n\n  set ripplesSpeed(value) {\n    this.waterUniforms.ripplesSpeed.value = value;\n  }\n\n  get ripplesSpeed() {\n    return this.waterUniforms.ripplesSpeed.value;\n  }\n\n  set ripplesScale(value) {\n    this.waterUniforms.ripplesScale.value = value;\n  }\n\n  get ripplesScale() {\n    return this.waterUniforms.ripplesScale.value;\n  }\n\n  update(time) {\n    const positionAttribute = this.geometry.attributes.position;\n\n    for (let x = 0; x <= this.resolution; x++) {\n      for (let z = 0; z <= this.resolution; z++) {\n        let y = 0;\n\n        for (let o = 0; o < this.octaves.length; o++) {\n          const octave = this.octaves[o];\n\n          if (octave.alternate) {\n            const noise = this.simplex.noise(\n              (x * octave.scale.x) / this.resolution,\n              (z * octave.scale.y) / this.resolution\n            );\n            y += Math.cos(noise + octave.speed.length() * time) * octave.height;\n          } else {\n            const noise =\n              this.simplex.noise(\n                (x * octave.scale.x + time * octave.speed.x) / this.resolution,\n                (z * octave.scale.y + time * octave.speed.y) / this.resolution\n              ) - 0.5;\n            y += noise * octave.height;\n          }\n        }\n\n        positionAttribute.setY(x * (this.resolution + 1) + z, y);\n      }\n    }\n\n    this.geometry.computeVertexNormals();\n    positionAttribute.needsUpdate = true;\n    this.waterUniforms.time.value = time;\n  }\n\n  clone(recursive) {\n    return new SimpleWater(this.material.normalMap, this.resolution, this.lowQuality).copy(this, recursive);\n  }\n\n  copy(source, recursive = true) {\n    super.copy(source, recursive);\n\n    this.opacity = source.opacity;\n    this.color.copy(source.color);\n    this.tideHeight = source.tideHeight;\n    this.tideScale.copy(source.tideScale);\n    this.tideSpeed.copy(source.tideSpeed);\n    this.waveHeight = source.waveHeight;\n    this.waveScale.copy(source.waveScale);\n    this.waveSpeed.copy(source.waveSpeed);\n    this.ripplesSpeed = source.ripplesSpeed;\n    this.ripplesScale = source.ripplesScale;\n\n    return this;\n  }\n}\n\nfunction vec2Equals(a, b) {\n  return a && b && a.x === b.x && a.y === b.y;\n}\n\nlet waterNormalMap = null;\n\nAFRAME.registerComponent(\"simple-water\", {\n  schema: {\n    opacity: { type: \"number\", default: 1 },\n    color: { type: \"color\" },\n    tideHeight: { type: \"number\", default: 0.01 },\n    tideScale: { type: \"vec2\", default: { x: 1, y: 1 } },\n    tideSpeed: { type: \"vec2\", default: { x: 0.5, y: 0.5 } },\n    waveHeight: { type: \"number\", default: 0.1 },\n    waveScale: { type: \"vec2\", default: { x: 1, y: 20 } },\n    waveSpeed: { type: \"vec2\", default: { x: 0.05, y: 6 } },\n    ripplesScale: { type: \"number\", default: 1 },\n    ripplesSpeed: { type: \"number\", default: 0.25 },\n  },\n\n  init() {\n    if (!waterNormalMap) {\n      waterNormalMap = new TextureLoader().load(waterNormalsUrl);\n    }\n\n    const usePhongShader = false; // window.APP.store.state.preferences.materialQualitySetting !== \"high\";\n    this.water = new SimpleWater(waterNormalMap, undefined, usePhongShader);\n    this.el.setObject3D(\"mesh\", this.water);\n  },\n\n  update(oldData) {\n    if (this.data.opacity !== oldData.opacity) {\n      this.water.opacity = this.data.opacity;\n    }\n\n    if (this.data.color !== oldData.color) {\n      this.water.color.set(this.data.color);\n    }\n\n    if (this.data.tideHeight !== oldData.tideHeight) {\n      this.water.tideHeight = this.data.tideHeight;\n    }\n\n    if (!vec2Equals(this.data.tideScale, oldData.tideScale)) {\n      this.water.tideScale.copy(this.data.tideScale);\n    }\n\n    if (!vec2Equals(this.data.tideSpeed, oldData.tideSpeed)) {\n      this.water.tideSpeed.copy(this.data.tideSpeed);\n    }\n\n    if (this.data.waveHeight !== oldData.waveHeight) {\n      this.water.waveHeight = this.data.waveHeight;\n    }\n\n    if (!vec2Equals(this.data.waveScale, oldData.waveScale)) {\n      this.water.waveScale.copy(this.data.waveScale);\n    }\n\n    if (!vec2Equals(this.data.waveSpeed, oldData.waveSpeed)) {\n      this.water.waveSpeed.copy(this.data.waveSpeed);\n    }\n\n    if (this.data.ripplesScale !== oldData.ripplesScale) {\n      this.water.ripplesScale = this.data.ripplesScale;\n    }\n\n    if (this.data.ripplesSpeed !== oldData.ripplesSpeed) {\n      this.water.ripplesSpeed = this.data.ripplesSpeed;\n    }\n  },\n\n  tick(time) {\n    this.water.update(time / 1000);\n  },\n\n  remove() {\n    const mesh = this.el.getObject3D(\"mesh\");\n    mesh.geometry.dispose();\n    // mesh.material.normalMap.dispose(); // the texture may be used by another component\n    mesh.material.dispose();\n    this.el.removeObject3D(\"mesh\");\n  },\n});\n","/* global AFRAME, THREE */\n// This is a modified copy of\n// https://github.com/mozilla/hubs/blob/6c49ce303ad7e030c80b301dbc3ce100cac7d9c1/src/components/uv-scroll.js\n// to work with an aframe system and waiting for material to be loaded via the materialtextureloaded event.\n// @license MPL 2.0 https://github.com/mozilla/hubs/blob/master/LICENSE\n\nconst textureToData = new Map();\nconst registeredTextures = [];\n\nAFRAME.registerSystem(\"uv-scroll\", {\n  tick(t, dt) {\n    for (let i = 0; i < registeredTextures.length; i++) {\n      const map = registeredTextures[i];\n      const { offset, instances } = textureToData.get(map);\n      const { component } = instances[0];\n\n      offset.addScaledVector(component.data.speed, dt / 1000);\n\n      offset.x = offset.x % 1.0;\n      offset.y = offset.y % 1.0;\n\n      const increment = component.data.increment;\n      map.offset.x = increment.x ? offset.x - (offset.x % increment.x) : offset.x;\n      map.offset.y = increment.y ? offset.y - (offset.y % increment.y) : offset.y;\n    }\n  },\n});\n\n/**\n * Animate the UV offset of a mesh's material\n * @component uv-scroll\n */\nAFRAME.registerComponent(\"uv-scroll\", {\n  schema: {\n    speed: { type: \"vec2\", default: { x: 0, y: 0 } },\n    increment: { type: \"vec2\", default: { x: 0, y: 0 } },\n  },\n  play() {\n    const mesh = this.el.getObject3D(\"mesh\") || this.el.getObject3D(\"skinnedmesh\");\n    const material = mesh && mesh.material;\n    if (material) {\n      // We store mesh here instead of the material directly because we end up swapping out the material in injectCustomShaderChunks.\n      // We need material in the first place because of MobileStandardMaterial\n      const instance = { component: this, mesh };\n\n      this.instance = instance;\n      this.map = material.map || material.emissiveMap;\n\n      if (this.map && !textureToData.has(this.map)) {\n        textureToData.set(this.map, {\n          offset: new THREE.Vector2(),\n          instances: [instance],\n        });\n        registeredTextures.push(this.map);\n      } else if (!this.map) {\n        if (this.el.components.material) {\n          // when using material and uv-scroll components\n          this.el.addEventListener(\"materialtextureloaded\", () => {\n            this.map = material.map || material.emissiveMap;\n            if (!textureToData.has(this.map)) {\n              textureToData.set(this.map, {\n                offset: new THREE.Vector2(),\n                instances: [instance],\n              });\n              registeredTextures.push(this.map);\n            }\n          });\n        } else {\n          console.warn(\"Ignoring uv-scroll added to mesh with no scrollable texture.\");\n        }\n      } else {\n        console.warn(\n          \"Multiple uv-scroll instances added to objects sharing a texture, only the speed/increment from the first one will have any effect\"\n        );\n        textureToData.get(this.map).instances.push(instance);\n      }\n    }\n  },\n\n  pause() {\n    if (this.map) {\n      const instances = textureToData.get(this.map).instances;\n      instances.splice(instances.indexOf(this.instance), 1);\n      // If this was the last uv-scroll component for a given texture\n      if (!instances.length) {\n        textureToData.delete(this.map);\n        registeredTextures.splice(registeredTextures.indexOf(this.map), 1);\n      }\n    }\n  },\n});\n","/* global AFRAME, THREE, NAF */\n\nexport const teleportTo = (position, rotation, withTransition = true) => {\n  const quaternion = new THREE.Quaternion();\n  quaternion.setFromEuler(new THREE.Euler(0, THREE.MathUtils.degToRad(rotation.y), 0));\n  const cameraRig = document.querySelector(\"#rig,#cameraRig\");\n  const camera = cameraRig.querySelector(\"[camera]\");\n  const cursorTeleport = cameraRig?.components[\"cursor-teleport\"];\n  withTransition = withTransition && !cameraRig.sceneEl.is(\"vr-mode\");\n  if (withTransition && cursorTeleport) {\n    cursorTeleport.teleportTo(position, quaternion);\n  } else {\n    if (cameraRig.hasAttribute(\"simple-navmesh-constraint\")) {\n      cameraRig.setAttribute(\"simple-navmesh-constraint\", \"enabled\", false);\n    }\n    const camForRotation = camera.object3D;\n    const destQuaternion = new THREE.Quaternion();\n    destQuaternion.setFromEuler(new THREE.Euler(0, camForRotation.rotation.y, 0));\n    destQuaternion.invert();\n    destQuaternion.multiply(quaternion);\n    cameraRig.object3D.position.copy(position);\n    cameraRig.object3D.quaternion.copy(destQuaternion);\n    if (cameraRig.hasAttribute(\"simple-navmesh-constraint\")) {\n      cameraRig.setAttribute(\"simple-navmesh-constraint\", \"enabled\", true);\n    }\n  }\n\n  if (camera) {\n    camera.components[\"look-controls\"].pitchObject.rotation.x = THREE.MathUtils.DEG2RAD * rotation.x;\n  }\n};\n\nexport const waypointSchema = {\n  template: \"#waypoint-template\",\n  components: [\n    {\n      component: \"waypoint\",\n      property: \"isOccupied\",\n    },\n    {\n      component: \"waypoint\",\n      property: \"occupiedBy\",\n    },\n  ],\n};\n\nfunction genClientId() {\n  return String(crypto.getRandomValues(new Uint32Array(1))[0]);\n}\n\nconst clientId = genClientId();\n\nfunction getClientId() {\n  // this.el.setAttribute(\"waypoint\", { isOccupied: true, occupiedBy: NAF.clientId });\n  // with NAF.clientId empty string didn't set empty string but kept \"scene\", we use here clientId that is not empty even if not connected\n  // so the unoccupyWaypoints function works correctly when not connected.\n  return NAF.clientId || clientId;\n}\n\nexport const registeredWaypoints = [];\n\nexport const unoccupyWaypoints = () => {\n  registeredWaypoints.forEach((waypoint) => {\n    if (waypoint.components.networked && waypoint.components.waypoint.data.occupiedBy === getClientId()) {\n      waypoint.setAttribute(\"waypoint\", { isOccupied: false, occupiedBy: \"scene\" });\n      // In case of reconnect, someone else may have the actual ownership\n      // of my seat, so be sure to take ownership.\n      if (NAF.connection.adapter) NAF.utils.takeOwnership(waypoint);\n    }\n  });\n\n  const cameraRig = document.querySelector(\"#rig,#cameraRig\");\n  cameraRig.components[\"player-info\"].occupyWaypoint = false;\n  cameraRig.setAttribute(\"player-info\", \"avatarPose\", \"stand\");\n};\n\nAFRAME.registerComponent(\"waypoint\", {\n  schema: {\n    canBeClicked: { type: \"bool\", default: false },\n    canBeOccupied: { type: \"bool\", default: false },\n    canBeSpawnPoint: { type: \"bool\", default: false },\n    snapToNavMesh: { type: \"bool\", default: false },\n    willDisableMotion: { type: \"bool\", default: false },\n    willDisableTeleporting: { type: \"bool\", default: false },\n    willMaintainInitialOrientation: { type: \"bool\", default: false },\n    isOccupied: { type: \"bool\", default: false },\n    occupiedBy: { type: \"string\", default: \"scene\" },\n  },\n  events: {\n    \"model-loaded\": function (evt) {\n      this.registerWaypoint();\n      this.el.classList.add(\"clickable\");\n      let rootNode = this.el.object3D.getObjectByName(\"RootNode\");\n      if (!rootNode.material && rootNode.children.length > 0) {\n        rootNode = rootNode.children[0];\n      }\n      if (rootNode && rootNode.material) {\n        this.mesh = rootNode;\n        if (!this.originalColor) {\n          this.originalColor = this.mesh.material.color.clone();\n        }\n        this.mesh.material.visible = false;\n      }\n    },\n    mouseenter: function (evt) {\n      if (this.mesh && !this.data.isOccupied) {\n        this.mesh.material.color.set(\"#0284c7\");\n        this.mesh.material.visible = true;\n      }\n    },\n    mouseleave: function (evt) {\n      if (this.mesh) {\n        this.mesh.material.color.set(this.originalColor);\n        this.mesh.material.visible = false;\n      }\n    },\n    \"ownership-gained\": function (evt) {\n      // We can gain the ownership automatically when previous owner of the\n      // persistent entity disconnect. Every participant gains the ownership, so\n      // there is a race condition to set isOccupied:false here.\n      if (\n        !this.el.sceneEl.is(\"naf:reconnecting\") &&\n        this.data.isOccupied &&\n        NAF.connection.activeDataChannels[this.data.occupiedBy] === false\n      ) {\n        setTimeout(() => {\n          if (NAF.utils.isMine(this.el)) {\n            // reconnected user may have taken back ownership after the 2s so do nothing in this case\n            this.el.setAttribute(\"waypoint\", { isOccupied: false });\n            // don't set occupiedBy:scene, the disconnected user will have a chance to occupy it again\n          }\n        }, 2000);\n      }\n    },\n    click: function (evt) {\n      unoccupyWaypoints();\n      const cameraRig = document.querySelector(\"#rig,#cameraRig\");\n      const camera = cameraRig.querySelector(\"[camera]\");\n\n      cameraRig.components[\"player-info\"].occupyWaypoint = true;\n      // Note: there is a check for occupyWaypoint in the movement-controls component\n      if (this.el.components.networked) {\n        this.el.setAttribute(\"waypoint\", { isOccupied: true, occupiedBy: getClientId() });\n        if (NAF.connection.adapter) NAF.utils.takeOwnership(this.el);\n      }\n\n      const spawnPoint = this.el;\n      const avatarPose = this.data.canBeOccupied && this.data.willDisableMotion ? \"sit\" : \"stand\";\n      cameraRig.setAttribute(\"player-info\", \"avatarPose\", avatarPose);\n\n      const position = new THREE.Vector3();\n      position.copy(spawnPoint.object3D.position);\n      const playerInfo = cameraRig.components[\"player-info\"];\n      const avatarSitOffset = playerInfo.avatarSitOffset ?? 0.45;\n      if (playerInfo.data.avatarPose === \"sit\") {\n        position.y -= avatarSitOffset;\n      }\n\n      const euler = new THREE.Euler().setFromQuaternion(spawnPoint.object3D.quaternion, \"YXZ\");\n      const rotation = { x: 0, y: euler.y * THREE.MathUtils.RAD2DEG + 180, z: 0 };\n      teleportTo(position, rotation, false);\n      cameraRig.setAttribute(\"player-info\", { seatRotation: camera.object3D.rotation.y });\n    },\n  },\n  registerWaypoint() {\n    // be sure to not add it twice\n    const idx = registeredWaypoints.indexOf(this.el);\n    if (idx === -1) {\n      registeredWaypoints.push(this.el);\n    }\n  },\n  unregisterWaypoint() {\n    // it may already be removed, so be careful indexOf is not -1 otherwise it will remove the last item of the array\n    const idx = registeredWaypoints.indexOf(this.el);\n    if (idx > -1) {\n      registeredWaypoints.splice(idx, 1);\n    }\n  },\n  init() {\n    if (!this.data.canBeClicked) {\n      this.registerWaypoint();\n      // so we have it in the registeredWaypoints array, and it won't be raycastable because we don't have a mesh\n    }\n    // if canBeClicked, then we added a gltf-model component and it will be registered in model-loaded\n  },\n  remove() {\n    this.unregisterWaypoint();\n  },\n  update(oldData) {\n    // this.data.isOccupied is false if some other participant set it to\n    // false in ownership-gained and sent me back the change when I'm reconnected\n    if (!this.data.isOccupied && this.data.occupiedBy === getClientId()) {\n      // take back my seat if I didn't choose another seat while I was reconnecting\n      const currentlyOnAnotherSeat = registeredWaypoints.find((waypoint) => {\n        return (\n          this.el !== waypoint &&\n          waypoint.components.networked &&\n          waypoint.components.waypoint.data.occupiedBy === getClientId()\n        );\n      });\n      if (currentlyOnAnotherSeat) {\n        this.el.setAttribute(\"waypoint\", { isOccupied: false, occupiedBy: \"scene\" });\n      } else {\n        this.el.setAttribute(\"waypoint\", { isOccupied: true });\n      }\n      if (NAF.connection.adapter) NAF.utils.takeOwnership(this.el);\n    }\n\n    if (this.data.canBeClicked && oldData.isOccupied !== this.data.isOccupied) {\n      if (this.data.isOccupied) {\n        this.el.object3D.visible = false;\n        this.el.classList.remove(\"clickable\");\n      } else {\n        this.el.object3D.visible = true;\n        this.el.classList.add(\"clickable\");\n      }\n    }\n  },\n});\n","/* global THREE */\nimport { LUTCubeLoader } from \"three/addons/loaders/LUTCubeLoader.js\";\nimport blenderLutPath from \"../assets/blender-lut.cube\";\n\nexport const defaultEnvironmentSettings = {\n  toneMapping: \"LUTToneMapping\",\n  toneMappingExposure: 1,\n  backgroundColor: \"skyblue\",\n  backgroundTexture: null,\n  envMapTexture: null,\n};\n\n// const toneMappingOptions = {\n//   None: \"NoToneMapping\",\n//   Linear: \"LinearToneMapping\",\n//   Reinhard: \"ReinhardToneMapping\",\n//   Cineon: \"CineonToneMapping\",\n//   ACESFilmic: \"ACESFilmicToneMapping\",\n//   CustomToneMapping: \"CustomToneMapping\",\n//   LUTToneMapping: \"LUTToneMapping\",\n// };\n\nlet blenderLUTPromise; // lazy loaded\n\nconst updateMaterials = (scene) => {\n  scene.traverse((o) => {\n    if (o.material) o.material.needsUpdate = true;\n  });\n};\n\n// settings example without GLTFHubsComponentsExtension plugin:\n// {\n//   \"toneMapping\": \"LUTToneMapping\",\n//   \"toneMappingExposure\": 1,\n//   \"backgroundColor\": \"#ffffff\",\n//   \"backgroundTexture\": {\n//       \"__mhc_link_type\": \"texture\",\n//       \"index\": 0\n//   },\n//   \"envMapTexture\": {\n//       \"__mhc_link_type\": \"texture\",\n//       \"index\": 1\n//   }\n// }\n// With GLTFHubsComponentsExtension plugin, backgroundTexture and envMapTexture are Texture objects.\nexport function inflateEnvironmentSettings(sceneEl, settings) {\n  const scene = sceneEl.object3D;\n  const renderer = sceneEl.renderer;\n  let materialsNeedUpdate = false;\n  const newToneMapping = THREE[settings.toneMapping];\n  if (typeof newToneMapping === \"undefined\") {\n    console.error(\"You need an aframe build with the tonemappingLUT patch to make LUTToneMapping work.\");\n    return;\n  }\n  if (renderer.toneMapping !== newToneMapping) {\n    renderer.toneMapping = newToneMapping;\n    if (newToneMapping === THREE.LUTToneMapping) {\n      if (!blenderLUTPromise) {\n        blenderLUTPromise = new Promise(function (resolve, reject) {\n          new LUTCubeLoader().load(blenderLutPath, ({ texture3D }) => resolve(texture3D), null, reject);\n        });\n      }\n\n      blenderLUTPromise\n        .then((t) => {\n          renderer.tonemappingLUT = t;\n          updateMaterials(scene);\n        })\n        .catch(function (e) {\n          console.error(\"Error loading Blender LUT\", e);\n          blenderLUTPromise = null;\n        });\n    } else {\n      renderer.tonemappingLUT = null;\n      materialsNeedUpdate = true;\n    }\n  }\n\n  renderer.toneMappingExposure = settings.toneMappingExposure;\n\n  if (settings.backgroundTexture) {\n    // Assume texture is always an equirect for now\n    settings.backgroundTexture.mapping = THREE.EquirectangularReflectionMapping;\n    settings.backgroundTexture.flipY = true;\n    scene.background = settings.backgroundTexture;\n  } else {\n    scene.background = new THREE.Color(settings.backgroundColor);\n  }\n  if (settings.envMapTexture) {\n    // if (this.prevEnvMapTextureUUID !== settings.envMapTexture.uuid) {\n    // this.prevEnvMapTextureUUID = settings.envMapTexture.uuid;\n    // TODO PMREMGenerator should be fixed to not assume this\n    settings.envMapTexture.flipY = true;\n    // Assume texture is always an equirect for now\n    settings.envMapTexture.mapping = THREE.EquirectangularReflectionMapping;\n    scene.environment = settings.envMapTexture;\n    // }\n    // } else if (settings.skybox) {\n    //   if (this.prevEnvMapTextureUUID !== settings.skybox.uuid) {\n    //     this.prevEnvMapTextureUUID = settings.skybox.uuid;\n    //     this.scene.environment = settings.skybox.sky.generateEnvironmentMap(this.renderer);\n    //   }\n  } else {\n    scene.environment = null;\n    // this.prevEnvMapTextureUUID = null;\n  }\n\n  if (materialsNeedUpdate) {\n    updateMaterials(scene);\n  }\n}\n","import { inflateEnvironmentSettings } from \"./environment-settings\";\nimport { inflateMediaFrame } from \"./media-frame\";\nimport { inflateNavMesh } from \"./nav-mesh\";\nimport { inflateReflectionProbe } from \"./reflection-probe\";\nimport { inflateUVScroll } from \"./uv-scroll\";\nimport { inflateWaypoint } from \"./waypoint\";\n\nexport const gltfInflators = new Map();\ngltfInflators.set(\"environment-settings\", inflateEnvironmentSettings);\ngltfInflators.set(\"media-frame\", inflateMediaFrame);\ngltfInflators.set(\"nav-mesh\", inflateNavMesh);\ngltfInflators.set(\"reflection-probe\", inflateReflectionProbe);\ngltfInflators.set(\"uv-scroll\", inflateUVScroll);\ngltfInflators.set(\"waypoint\", inflateWaypoint);\n","import { createEntityAndReparent } from \"./utils\";\n\nexport function inflateMediaFrame(node, componentProps, otherComponents) {\n  const el = createEntityAndReparent(node);\n  el.classList.add(\"mediaframe\");\n  el.classList.add(node.name); // to view it in the editor\n\n  // Set networked component first, media-frame is getting the networkId from networked component\n  el.setAttribute(\"networked\", {\n    template: \"#media-template\",\n    attachTemplateToLocal: false,\n    networkId: otherComponents.networked.id,\n    persistent: true,\n    owner: \"scene\",\n  });\n  if (NAF.connection.adapter) {\n    el.setAttribute(\"networked-video-source\", {});\n  } else {\n    const listener = () => {\n      el.setAttribute(\"networked-video-source\", {});\n    };\n    document.body.addEventListener(\"connected\", listener);\n  }\n  el.setAttribute(\"media-frame\", componentProps);\n\n  return el;\n}\n","export function inflateNavMesh(node, componentProps, otherComponents) {\n  const sceneEl = node.el.sceneEl;\n\n  const el = document.createElement(\"a-entity\");\n  // Very important, add the class before appendChild.\n  // The blink-controls component is using the child-attached event and will do a\n  // evt.detail.el.matches(data.collisionEntities)) check,\n  // so el.matches('.navmesh') before adding the element to collisionEntities array.\n  el.classList.add(\"navmesh\");\n  el.setAttribute(\"nav-mesh\", \"\");\n  sceneEl.appendChild(el);\n  el.setObject3D(\"mesh\", node);\n  // Reset simple-navmesh-constraint\n  // Temporary until we add child-attached/child-detached support in simple-navmesh-constraint\n  // https://github.com/networked-aframe/naf-valid-avatars/issues/28\n  const cameraRig = document.querySelector(\"#rig,#cameraRig\");\n  if (cameraRig) {\n    cameraRig.removeAttribute(\"simple-navmesh-constraint\");\n    cameraRig.setAttribute(\"simple-navmesh-constraint\", \"navmesh:.navmesh;fall:0.5;height:0;exclude:.navmesh-hole;\");\n  }\n  return el;\n}\n","/* global THREE */\nimport { addComponent } from \"./utils\";\n\nexport function inflateReflectionProbe(node, componentProps, otherComponents) {\n  if (typeof THREE.ReflectionProbe === \"undefined\") {\n    console.error(\"You need an aframe build with the ReflectionProbe patch to make reflection probes work.\");\n    return;\n  }\n  // TODO PMREMGenerator should be fixed to not assume this\n  componentProps.envMapTexture.flipY = true;\n  // Assume texture is always an equirect for now\n  componentProps.envMapTexture.mapping = THREE.EquirectangularReflectionMapping;\n  addComponent(node, \"reflection-probe\", componentProps);\n}\n","import { FakeEntity } from \"../components/FakeEntity\";\n\nexport const addComponent = (node, componentName, data) => {\n  if (!node.fakeEl) {\n    node.fakeEl = new FakeEntity(node);\n  }\n  const componentId = undefined; // supporting only one component of the same type on a FakeEntity\n  const component = new AFRAME.components[componentName].Component(node.fakeEl, data, componentId);\n  component.play();\n  return component;\n};\n\nexport const createEntityAndReparent = (node, klass = undefined) => {\n  const sceneEl = node.el.sceneEl;\n  const entity = document.createElement(\"a-entity\");\n  if (klass) {\n    entity.classList.add(klass);\n  }\n  sceneEl.appendChild(entity);\n  entity.object3D.removeFromParent();\n  entity.object3D = node;\n  entity.object3D.el = entity;\n  // We assume here that node local position/quaternion is the same as world position/quaternion\n  sceneEl.object3D.attach(node);\n  return entity;\n};\n","import { addComponent } from \"./utils\";\nimport { FakeEntity } from \"../components/FakeEntity\";\n\nexport function inflateUVScroll(node, componentProps, otherComponents) {\n  // set the node (plane geometry) as the 'mesh' first\n  node.fakeEl = new FakeEntity(node);\n  node.fakeEl.setObject3D(\"mesh\", node);\n  // then add uv-scroll that uses getObject3D(\"mesh\")\n  addComponent(node, \"uv-scroll\", componentProps);\n}\n","import { createEntityAndReparent } from \"./utils\";\n\nexport function inflateWaypoint(node, componentProps, otherComponents) {\n  const el = createEntityAndReparent(node);\n\n  if (componentProps.canBeOccupied) {\n    el.setAttribute(\"networked\", {\n      template: \"#waypoint-template\",\n      attachTemplateToLocal: false,\n      networkId: otherComponents.networked.id,\n      persistent: true,\n      owner: \"scene\",\n    });\n  }\n\n  el.setAttribute(\"waypoint\", componentProps);\n\n  if (componentProps.canBeClicked && componentProps.canBeOccupied) {\n    if (componentProps.willDisableMotion) {\n      el.setAttribute(\"gltf-model\", \"/models/waypoint_sit.glb\");\n    } else {\n      el.setAttribute(\"gltf-model\", \"/models/waypoint_stand.glb\");\n    }\n  }\n\n  return el;\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE_three__;","// https://wwwimages2.adobe.com/content/dam/acom/en/products/speedgrade/cc/pdfs/cube-lut-specification-1.0.pdf\n\nimport {\n\tClampToEdgeWrapping,\n\tDataTexture,\n\tData3DTexture,\n\tFileLoader,\n\tFloatType,\n\tLinearFilter,\n\tLoader,\n\tUnsignedByteType,\n\tVector3,\n} from 'three';\n\nexport class LUTCubeLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.type = UnsignedByteType;\n\n\t}\n\n\tsetType( type ) {\n\n\t\tif ( type !== UnsignedByteType && type !== FloatType ) {\n\n\t\t\tthrow new Error( 'LUTCubeLoader: Unsupported type' );\n\n\t\t}\n\n\t\tthis.type = type;\n\n\t\treturn this;\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'text' );\n\t\tloader.load( url, text => {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( this.parse( text ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tthis.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( input ) {\n\n\t\tconst regExpTitle = /TITLE +\"([^\"]*)\"/;\n\t\tconst regExpSize = /LUT_3D_SIZE +(\\d+)/;\n\t\tconst regExpDomainMin = /DOMAIN_MIN +([\\d.]+) +([\\d.]+) +([\\d.]+)/;\n\t\tconst regExpDomainMax = /DOMAIN_MAX +([\\d.]+) +([\\d.]+) +([\\d.]+)/;\n\t\tconst regExpDataPoints = /^([\\d.e+-]+) +([\\d.e+-]+) +([\\d.e+-]+) *$/gm;\n\n\t\tlet result = regExpTitle.exec( input );\n\t\tconst title = ( result !== null ) ? result[ 1 ] : null;\n\n\t\tresult = regExpSize.exec( input );\n\n\t\tif ( result === null ) {\n\n\t\t\tthrow new Error( 'LUTCubeLoader: Missing LUT_3D_SIZE information' );\n\n\t\t}\n\n\t\tconst size = Number( result[ 1 ] );\n\t\tconst length = size ** 3 * 4;\n\t\tconst data = this.type === UnsignedByteType ? new Uint8Array( length ) : new Float32Array( length );\n\n\t\tconst domainMin = new Vector3( 0, 0, 0 );\n\t\tconst domainMax = new Vector3( 1, 1, 1 );\n\n\t\tresult = regExpDomainMin.exec( input );\n\n\t\tif ( result !== null ) {\n\n\t\t\tdomainMin.set( Number( result[ 1 ] ), Number( result[ 2 ] ), Number( result[ 3 ] ) );\n\n\t\t}\n\n\t\tresult = regExpDomainMax.exec( input );\n\n\t\tif ( result !== null ) {\n\n\t\t\tdomainMax.set( Number( result[ 1 ] ), Number( result[ 2 ] ), Number( result[ 3 ] ) );\n\n\t\t}\n\n\t\tif ( domainMin.x > domainMax.x || domainMin.y > domainMax.y || domainMin.z > domainMax.z ) {\n\n\t\t\tthrow new Error( 'LUTCubeLoader: Invalid input domain' );\n\n\t\t}\n\n\t\tconst scale = this.type === UnsignedByteType ? 255 : 1;\n\t\tlet i = 0;\n\n\t\twhile ( ( result = regExpDataPoints.exec( input ) ) !== null ) {\n\n\t\t\tdata[ i ++ ] = Number( result[ 1 ] ) * scale;\n\t\t\tdata[ i ++ ] = Number( result[ 2 ] ) * scale;\n\t\t\tdata[ i ++ ] = Number( result[ 3 ] ) * scale;\n\t\t\tdata[ i ++ ] = scale;\n\n\t\t}\n\n\t\tconst texture = new DataTexture();\n\t\ttexture.image.data = data;\n\t\ttexture.image.width = size;\n\t\ttexture.image.height = size * size;\n\t\ttexture.type = this.type;\n\t\ttexture.magFilter = LinearFilter;\n\t\ttexture.minFilter = LinearFilter;\n\t\ttexture.wrapS = ClampToEdgeWrapping;\n\t\ttexture.wrapT = ClampToEdgeWrapping;\n\t\ttexture.generateMipmaps = false;\n\t\ttexture.needsUpdate = true;\n\n\t\tconst texture3D = new Data3DTexture();\n\t\ttexture3D.image.data = data;\n\t\ttexture3D.image.width = size;\n\t\ttexture3D.image.height = size;\n\t\ttexture3D.image.depth = size;\n\t\ttexture3D.type = this.type;\n\t\ttexture3D.magFilter = LinearFilter;\n\t\ttexture3D.minFilter = LinearFilter;\n\t\ttexture3D.wrapS = ClampToEdgeWrapping;\n\t\ttexture3D.wrapT = ClampToEdgeWrapping;\n\t\ttexture3D.wrapR = ClampToEdgeWrapping;\n\t\ttexture3D.generateMipmaps = false;\n\t\ttexture3D.needsUpdate = true;\n\n\t\treturn {\n\t\t\ttitle,\n\t\t\tsize,\n\t\t\tdomainMin,\n\t\t\tdomainMax,\n\t\t\ttexture,\n\t\t\ttexture3D,\n\t\t};\n\n\t}\n\n}\n","import {\n\tDataTextureLoader,\n\tDataUtils,\n\tFloatType,\n\tHalfFloatType,\n\tLinearFilter,\n\tLinearSRGBColorSpace\n} from 'three';\n\n// https://github.com/mrdoob/three.js/issues/5552\n// http://en.wikipedia.org/wiki/RGBE_image_format\n\nclass RGBELoader extends DataTextureLoader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.type = HalfFloatType;\n\n\t}\n\n\t// adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n\n\tparse( buffer ) {\n\n\t\tconst\n\t\t\t/* default error routine.  change this to change error handling */\n\t\t\trgbe_read_error = 1,\n\t\t\trgbe_write_error = 2,\n\t\t\trgbe_format_error = 3,\n\t\t\trgbe_memory_error = 4,\n\t\t\trgbe_error = function ( rgbe_error_code, msg ) {\n\n\t\t\t\tswitch ( rgbe_error_code ) {\n\n\t\t\t\t\tcase rgbe_read_error: throw new Error( 'THREE.RGBELoader: Read Error: ' + ( msg || '' ) );\n\t\t\t\t\tcase rgbe_write_error: throw new Error( 'THREE.RGBELoader: Write Error: ' + ( msg || '' ) );\n\t\t\t\t\tcase rgbe_format_error: throw new Error( 'THREE.RGBELoader: Bad File Format: ' + ( msg || '' ) );\n\t\t\t\t\tdefault:\n\t\t\t\t\tcase rgbe_memory_error: throw new Error( 'THREE.RGBELoader: Memory Error: ' + ( msg || '' ) );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\t/* offsets to red, green, and blue components in a data (float) pixel */\n\t\t\t//RGBE_DATA_RED = 0,\n\t\t\t//RGBE_DATA_GREEN = 1,\n\t\t\t//RGBE_DATA_BLUE = 2,\n\n\t\t\t/* number of floats per pixel, use 4 since stored in rgba image format */\n\t\t\t//RGBE_DATA_SIZE = 4,\n\n\t\t\t/* flags indicating which fields in an rgbe_header_info are valid */\n\t\t\tRGBE_VALID_PROGRAMTYPE = 1,\n\t\t\tRGBE_VALID_FORMAT = 2,\n\t\t\tRGBE_VALID_DIMENSIONS = 4,\n\n\t\t\tNEWLINE = '\\n',\n\n\t\t\tfgets = function ( buffer, lineLimit, consume ) {\n\n\t\t\t\tconst chunkSize = 128;\n\n\t\t\t\tlineLimit = ! lineLimit ? 1024 : lineLimit;\n\t\t\t\tlet p = buffer.pos,\n\t\t\t\t\ti = - 1, len = 0, s = '',\n\t\t\t\t\tchunk = String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) );\n\n\t\t\t\twhile ( ( 0 > ( i = chunk.indexOf( NEWLINE ) ) ) && ( len < lineLimit ) && ( p < buffer.byteLength ) ) {\n\n\t\t\t\t\ts += chunk; len += chunk.length;\n\t\t\t\t\tp += chunkSize;\n\t\t\t\t\tchunk += String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( - 1 < i ) {\n\n\t\t\t\t\t/*for (i=l-1; i>=0; i--) {\n\t\t\t\t\t\tbyteCode = m.charCodeAt(i);\n\t\t\t\t\t\tif (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\n\t\t\t\t\t\telse if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\n\t\t\t\t\t\tif (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\n\t\t\t\t\t}*/\n\t\t\t\t\tif ( false !== consume ) buffer.pos += len + i + 1;\n\t\t\t\t\treturn s + chunk.slice( 0, i );\n\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\n\t\t\t},\n\n\t\t\t/* minimal header reading.  modify if you want to parse more information */\n\t\t\tRGBE_ReadHeader = function ( buffer ) {\n\n\n\t\t\t\t// regexes to parse header info fields\n\t\t\t\tconst magic_token_re = /^#\\?(\\S+)/,\n\t\t\t\t\tgamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\texposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\tformat_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n\t\t\t\t\tdimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n\n\t\t\t\t\t// RGBE format header struct\n\t\t\t\t\theader = {\n\n\t\t\t\t\t\tvalid: 0, /* indicate which fields are valid */\n\n\t\t\t\t\t\tstring: '', /* the actual header string */\n\n\t\t\t\t\t\tcomments: '', /* comments found in header */\n\n\t\t\t\t\t\tprogramtype: 'RGBE', /* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */\n\n\t\t\t\t\t\tformat: '', /* RGBE format, default 32-bit_rle_rgbe */\n\n\t\t\t\t\t\tgamma: 1.0, /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */\n\n\t\t\t\t\t\texposure: 1.0, /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */\n\n\t\t\t\t\t\twidth: 0, height: 0 /* image dimensions, width/height */\n\n\t\t\t\t\t};\n\n\t\t\t\tlet line, match;\n\n\t\t\t\tif ( buffer.pos >= buffer.byteLength || ! ( line = fgets( buffer ) ) ) {\n\n\t\t\t\t\trgbe_error( rgbe_read_error, 'no header found' );\n\n\t\t\t\t}\n\n\t\t\t\t/* if you want to require the magic token then uncomment the next line */\n\t\t\t\tif ( ! ( match = line.match( magic_token_re ) ) ) {\n\n\t\t\t\t\trgbe_error( rgbe_format_error, 'bad initial token' );\n\n\t\t\t\t}\n\n\t\t\t\theader.valid |= RGBE_VALID_PROGRAMTYPE;\n\t\t\t\theader.programtype = match[ 1 ];\n\t\t\t\theader.string += line + '\\n';\n\n\t\t\t\twhile ( true ) {\n\n\t\t\t\t\tline = fgets( buffer );\n\t\t\t\t\tif ( false === line ) break;\n\t\t\t\t\theader.string += line + '\\n';\n\n\t\t\t\t\tif ( '#' === line.charAt( 0 ) ) {\n\n\t\t\t\t\t\theader.comments += line + '\\n';\n\t\t\t\t\t\tcontinue; // comment line\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( gamma_re ) ) {\n\n\t\t\t\t\t\theader.gamma = parseFloat( match[ 1 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( exposure_re ) ) {\n\n\t\t\t\t\t\theader.exposure = parseFloat( match[ 1 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( format_re ) ) {\n\n\t\t\t\t\t\theader.valid |= RGBE_VALID_FORMAT;\n\t\t\t\t\t\theader.format = match[ 1 ];//'32-bit_rle_rgbe';\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( dimensions_re ) ) {\n\n\t\t\t\t\t\theader.valid |= RGBE_VALID_DIMENSIONS;\n\t\t\t\t\t\theader.height = parseInt( match[ 1 ], 10 );\n\t\t\t\t\t\theader.width = parseInt( match[ 2 ], 10 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ( header.valid & RGBE_VALID_FORMAT ) && ( header.valid & RGBE_VALID_DIMENSIONS ) ) break;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_FORMAT ) ) {\n\n\t\t\t\t\trgbe_error( rgbe_format_error, 'missing format specifier' );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_DIMENSIONS ) ) {\n\n\t\t\t\t\trgbe_error( rgbe_format_error, 'missing image size specifier' );\n\n\t\t\t\t}\n\n\t\t\t\treturn header;\n\n\t\t\t},\n\n\t\t\tRGBE_ReadPixels_RLE = function ( buffer, w, h ) {\n\n\t\t\t\tconst scanline_width = w;\n\n\t\t\t\tif (\n\t\t\t\t\t// run length encoding is not allowed so read flat\n\t\t\t\t\t( ( scanline_width < 8 ) || ( scanline_width > 0x7fff ) ) ||\n\t\t\t\t\t// this file is not run length encoded\n\t\t\t\t\t( ( 2 !== buffer[ 0 ] ) || ( 2 !== buffer[ 1 ] ) || ( buffer[ 2 ] & 0x80 ) )\n\t\t\t\t) {\n\n\t\t\t\t\t// return the flat buffer\n\t\t\t\t\treturn new Uint8Array( buffer );\n\n\t\t\t\t}\n\n\t\t\t\tif ( scanline_width !== ( ( buffer[ 2 ] << 8 ) | buffer[ 3 ] ) ) {\n\n\t\t\t\t\trgbe_error( rgbe_format_error, 'wrong scanline width' );\n\n\t\t\t\t}\n\n\t\t\t\tconst data_rgba = new Uint8Array( 4 * w * h );\n\n\t\t\t\tif ( ! data_rgba.length ) {\n\n\t\t\t\t\trgbe_error( rgbe_memory_error, 'unable to allocate buffer space' );\n\n\t\t\t\t}\n\n\t\t\t\tlet offset = 0, pos = 0;\n\n\t\t\t\tconst ptr_end = 4 * scanline_width;\n\t\t\t\tconst rgbeStart = new Uint8Array( 4 );\n\t\t\t\tconst scanline_buffer = new Uint8Array( ptr_end );\n\t\t\t\tlet num_scanlines = h;\n\n\t\t\t\t// read in each successive scanline\n\t\t\t\twhile ( ( num_scanlines > 0 ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\tif ( pos + 4 > buffer.byteLength ) {\n\n\t\t\t\t\t\trgbe_error( rgbe_read_error );\n\n\t\t\t\t\t}\n\n\t\t\t\t\trgbeStart[ 0 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 1 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 2 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 3 ] = buffer[ pos ++ ];\n\n\t\t\t\t\tif ( ( 2 != rgbeStart[ 0 ] ) || ( 2 != rgbeStart[ 1 ] ) || ( ( ( rgbeStart[ 2 ] << 8 ) | rgbeStart[ 3 ] ) != scanline_width ) ) {\n\n\t\t\t\t\t\trgbe_error( rgbe_format_error, 'bad rgbe scanline format' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// read each of the four channels for the scanline into the buffer\n\t\t\t\t\t// first red, then green, then blue, then exponent\n\t\t\t\t\tlet ptr = 0, count;\n\n\t\t\t\t\twhile ( ( ptr < ptr_end ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\t\tcount = buffer[ pos ++ ];\n\t\t\t\t\t\tconst isEncodedRun = count > 128;\n\t\t\t\t\t\tif ( isEncodedRun ) count -= 128;\n\n\t\t\t\t\t\tif ( ( 0 === count ) || ( ptr + count > ptr_end ) ) {\n\n\t\t\t\t\t\t\trgbe_error( rgbe_format_error, 'bad scanline data' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( isEncodedRun ) {\n\n\t\t\t\t\t\t\t// a (encoded) run of the same value\n\t\t\t\t\t\t\tconst byteValue = buffer[ pos ++ ];\n\t\t\t\t\t\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\t\t\t\t\t\tscanline_buffer[ ptr ++ ] = byteValue;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//ptr += count;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// a literal-run\n\t\t\t\t\t\t\tscanline_buffer.set( buffer.subarray( pos, pos + count ), ptr );\n\t\t\t\t\t\t\tptr += count; pos += count;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\t// now convert data from buffer into rgba\n\t\t\t\t\t// first red, then green, then blue, then exponent (alpha)\n\t\t\t\t\tconst l = scanline_width; //scanline_buffer.byteLength;\n\t\t\t\t\tfor ( let i = 0; i < l; i ++ ) {\n\n\t\t\t\t\t\tlet off = 0;\n\t\t\t\t\t\tdata_rgba[ offset ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 1 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 2 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 3 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toffset += 4;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tnum_scanlines --;\n\n\t\t\t\t}\n\n\t\t\t\treturn data_rgba;\n\n\t\t\t};\n\n\t\tconst RGBEByteToRGBFloat = function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\tconst e = sourceArray[ sourceOffset + 3 ];\n\t\t\tconst scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\tdestArray[ destOffset + 0 ] = sourceArray[ sourceOffset + 0 ] * scale;\n\t\t\tdestArray[ destOffset + 1 ] = sourceArray[ sourceOffset + 1 ] * scale;\n\t\t\tdestArray[ destOffset + 2 ] = sourceArray[ sourceOffset + 2 ] * scale;\n\t\t\tdestArray[ destOffset + 3 ] = 1;\n\n\t\t};\n\n\t\tconst RGBEByteToRGBHalf = function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\tconst e = sourceArray[ sourceOffset + 3 ];\n\t\t\tconst scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\t// clamping to 65504, the maximum representable value in float16\n\t\t\tdestArray[ destOffset + 0 ] = DataUtils.toHalfFloat( Math.min( sourceArray[ sourceOffset + 0 ] * scale, 65504 ) );\n\t\t\tdestArray[ destOffset + 1 ] = DataUtils.toHalfFloat( Math.min( sourceArray[ sourceOffset + 1 ] * scale, 65504 ) );\n\t\t\tdestArray[ destOffset + 2 ] = DataUtils.toHalfFloat( Math.min( sourceArray[ sourceOffset + 2 ] * scale, 65504 ) );\n\t\t\tdestArray[ destOffset + 3 ] = DataUtils.toHalfFloat( 1 );\n\n\t\t};\n\n\t\tconst byteArray = new Uint8Array( buffer );\n\t\tbyteArray.pos = 0;\n\t\tconst rgbe_header_info = RGBE_ReadHeader( byteArray );\n\n\t\tconst w = rgbe_header_info.width,\n\t\t\th = rgbe_header_info.height,\n\t\t\timage_rgba_data = RGBE_ReadPixels_RLE( byteArray.subarray( byteArray.pos ), w, h );\n\n\n\t\tlet data, type;\n\t\tlet numElements;\n\n\t\tswitch ( this.type ) {\n\n\t\t\tcase FloatType:\n\n\t\t\t\tnumElements = image_rgba_data.length / 4;\n\t\t\t\tconst floatArray = new Float32Array( numElements * 4 );\n\n\t\t\t\tfor ( let j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\tRGBEByteToRGBFloat( image_rgba_data, j * 4, floatArray, j * 4 );\n\n\t\t\t\t}\n\n\t\t\t\tdata = floatArray;\n\t\t\t\ttype = FloatType;\n\t\t\t\tbreak;\n\n\t\t\tcase HalfFloatType:\n\n\t\t\t\tnumElements = image_rgba_data.length / 4;\n\t\t\t\tconst halfArray = new Uint16Array( numElements * 4 );\n\n\t\t\t\tfor ( let j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\tRGBEByteToRGBHalf( image_rgba_data, j * 4, halfArray, j * 4 );\n\n\t\t\t\t}\n\n\t\t\t\tdata = halfArray;\n\t\t\t\ttype = HalfFloatType;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tthrow new Error( 'THREE.RGBELoader: Unsupported type: ' + this.type );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\treturn {\n\t\t\twidth: w, height: h,\n\t\t\tdata: data,\n\t\t\theader: rgbe_header_info.string,\n\t\t\tgamma: rgbe_header_info.gamma,\n\t\t\texposure: rgbe_header_info.exposure,\n\t\t\ttype: type\n\t\t};\n\n\t}\n\n\tsetDataType( value ) {\n\n\t\tthis.type = value;\n\t\treturn this;\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tfunction onLoadCallback( texture, texData ) {\n\n\t\t\tswitch ( texture.type ) {\n\n\t\t\t\tcase FloatType:\n\t\t\t\tcase HalfFloatType:\n\n\t\t\t\t\ttexture.colorSpace = LinearSRGBColorSpace;\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}\n\n\t\treturn super.load( url, onLoadCallback, onProgress, onError );\n\n\t}\n\n}\n\nexport { RGBELoader };\n","// Ported from Stefan Gustavson's java implementation\n// http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\n// Read Stefan's excellent paper for details on how this code works.\n//\n// Sean McCullough banksean@gmail.com\n//\n// Added 4D noise\n\n/**\n * You can pass in a random number generator object if you like.\n * It is assumed to have a random() method.\n */\nclass SimplexNoise {\n\n\tconstructor( r = Math ) {\n\n\t\tthis.grad3 = [[ 1, 1, 0 ], [ - 1, 1, 0 ], [ 1, - 1, 0 ], [ - 1, - 1, 0 ],\n\t\t\t[ 1, 0, 1 ], [ - 1, 0, 1 ], [ 1, 0, - 1 ], [ - 1, 0, - 1 ],\n\t\t\t[ 0, 1, 1 ], [ 0, - 1, 1 ], [ 0, 1, - 1 ], [ 0, - 1, - 1 ]];\n\n\t\tthis.grad4 = [[ 0, 1, 1, 1 ], [ 0, 1, 1, - 1 ], [ 0, 1, - 1, 1 ], [ 0, 1, - 1, - 1 ],\n\t\t\t[ 0, - 1, 1, 1 ], [ 0, - 1, 1, - 1 ], [ 0, - 1, - 1, 1 ], [ 0, - 1, - 1, - 1 ],\n\t\t\t[ 1, 0, 1, 1 ], [ 1, 0, 1, - 1 ], [ 1, 0, - 1, 1 ], [ 1, 0, - 1, - 1 ],\n\t\t\t[ - 1, 0, 1, 1 ], [ - 1, 0, 1, - 1 ], [ - 1, 0, - 1, 1 ], [ - 1, 0, - 1, - 1 ],\n\t\t\t[ 1, 1, 0, 1 ], [ 1, 1, 0, - 1 ], [ 1, - 1, 0, 1 ], [ 1, - 1, 0, - 1 ],\n\t\t\t[ - 1, 1, 0, 1 ], [ - 1, 1, 0, - 1 ], [ - 1, - 1, 0, 1 ], [ - 1, - 1, 0, - 1 ],\n\t\t\t[ 1, 1, 1, 0 ], [ 1, 1, - 1, 0 ], [ 1, - 1, 1, 0 ], [ 1, - 1, - 1, 0 ],\n\t\t\t[ - 1, 1, 1, 0 ], [ - 1, 1, - 1, 0 ], [ - 1, - 1, 1, 0 ], [ - 1, - 1, - 1, 0 ]];\n\n\t\tthis.p = [];\n\n\t\tfor ( let i = 0; i < 256; i ++ ) {\n\n\t\t\tthis.p[ i ] = Math.floor( r.random() * 256 );\n\n\t\t}\n\n\t\t// To remove the need for index wrapping, double the permutation table length\n\t\tthis.perm = [];\n\n\t\tfor ( let i = 0; i < 512; i ++ ) {\n\n\t\t\tthis.perm[ i ] = this.p[ i & 255 ];\n\n\t\t}\n\n\t\t// A lookup table to traverse the simplex around a given point in 4D.\n\t\t// Details can be found where this table is used, in the 4D noise method.\n\t\tthis.simplex = [\n\t\t\t[ 0, 1, 2, 3 ], [ 0, 1, 3, 2 ], [ 0, 0, 0, 0 ], [ 0, 2, 3, 1 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 1, 2, 3, 0 ],\n\t\t\t[ 0, 2, 1, 3 ], [ 0, 0, 0, 0 ], [ 0, 3, 1, 2 ], [ 0, 3, 2, 1 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 1, 3, 2, 0 ],\n\t\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\n\t\t\t[ 1, 2, 0, 3 ], [ 0, 0, 0, 0 ], [ 1, 3, 0, 2 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 2, 3, 0, 1 ], [ 2, 3, 1, 0 ],\n\t\t\t[ 1, 0, 2, 3 ], [ 1, 0, 3, 2 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 2, 0, 3, 1 ], [ 0, 0, 0, 0 ], [ 2, 1, 3, 0 ],\n\t\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\n\t\t\t[ 2, 0, 1, 3 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 3, 0, 1, 2 ], [ 3, 0, 2, 1 ], [ 0, 0, 0, 0 ], [ 3, 1, 2, 0 ],\n\t\t\t[ 2, 1, 0, 3 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 3, 1, 0, 2 ], [ 0, 0, 0, 0 ], [ 3, 2, 0, 1 ], [ 3, 2, 1, 0 ]];\n\n\t}\n\n\tdot( g, x, y ) {\n\n\t\treturn g[ 0 ] * x + g[ 1 ] * y;\n\n\t}\n\n\tdot3( g, x, y, z ) {\n\n\t\treturn g[ 0 ] * x + g[ 1 ] * y + g[ 2 ] * z;\n\n\t}\n\n\tdot4( g, x, y, z, w ) {\n\n\t\treturn g[ 0 ] * x + g[ 1 ] * y + g[ 2 ] * z + g[ 3 ] * w;\n\n\t}\n\n\tnoise( xin, yin ) {\n\n\t\tlet n0; // Noise contributions from the three corners\n\t\tlet n1;\n\t\tlet n2;\n\t\t// Skew the input space to determine which simplex cell we're in\n\t\tconst F2 = 0.5 * ( Math.sqrt( 3.0 ) - 1.0 );\n\t\tconst s = ( xin + yin ) * F2; // Hairy factor for 2D\n\t\tconst i = Math.floor( xin + s );\n\t\tconst j = Math.floor( yin + s );\n\t\tconst G2 = ( 3.0 - Math.sqrt( 3.0 ) ) / 6.0;\n\t\tconst t = ( i + j ) * G2;\n\t\tconst X0 = i - t; // Unskew the cell origin back to (x,y) space\n\t\tconst Y0 = j - t;\n\t\tconst x0 = xin - X0; // The x,y distances from the cell origin\n\t\tconst y0 = yin - Y0;\n\n\t\t// For the 2D case, the simplex shape is an equilateral triangle.\n\t\t// Determine which simplex we are in.\n\t\tlet i1; // Offsets for second (middle) corner of simplex in (i,j) coords\n\n\t\tlet j1;\n\t\tif ( x0 > y0 ) {\n\n\t\t\ti1 = 1; j1 = 0;\n\n\t\t\t// lower triangle, XY order: (0,0)->(1,0)->(1,1)\n\n\t\t}\telse {\n\n\t\t\ti1 = 0; j1 = 1;\n\n\t\t} // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n\n\t\t// A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n\t\t// a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n\t\t// c = (3-sqrt(3))/6\n\t\tconst x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n\t\tconst y1 = y0 - j1 + G2;\n\t\tconst x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n\t\tconst y2 = y0 - 1.0 + 2.0 * G2;\n\t\t// Work out the hashed gradient indices of the three simplex corners\n\t\tconst ii = i & 255;\n\t\tconst jj = j & 255;\n\t\tconst gi0 = this.perm[ ii + this.perm[ jj ] ] % 12;\n\t\tconst gi1 = this.perm[ ii + i1 + this.perm[ jj + j1 ] ] % 12;\n\t\tconst gi2 = this.perm[ ii + 1 + this.perm[ jj + 1 ] ] % 12;\n\t\t// Calculate the contribution from the three corners\n\t\tlet t0 = 0.5 - x0 * x0 - y0 * y0;\n\t\tif ( t0 < 0 ) n0 = 0.0;\n\t\telse {\n\n\t\t\tt0 *= t0;\n\t\t\tn0 = t0 * t0 * this.dot( this.grad3[ gi0 ], x0, y0 ); // (x,y) of grad3 used for 2D gradient\n\n\t\t}\n\n\t\tlet t1 = 0.5 - x1 * x1 - y1 * y1;\n\t\tif ( t1 < 0 ) n1 = 0.0;\n\t\telse {\n\n\t\t\tt1 *= t1;\n\t\t\tn1 = t1 * t1 * this.dot( this.grad3[ gi1 ], x1, y1 );\n\n\t\t}\n\n\t\tlet t2 = 0.5 - x2 * x2 - y2 * y2;\n\t\tif ( t2 < 0 ) n2 = 0.0;\n\t\telse {\n\n\t\t\tt2 *= t2;\n\t\t\tn2 = t2 * t2 * this.dot( this.grad3[ gi2 ], x2, y2 );\n\n\t\t}\n\n\t\t// Add contributions from each corner to get the final noise value.\n\t\t// The result is scaled to return values in the interval [-1,1].\n\t\treturn 70.0 * ( n0 + n1 + n2 );\n\n\t}\n\n\t// 3D simplex noise\n\tnoise3d( xin, yin, zin ) {\n\n\t\tlet n0; // Noise contributions from the four corners\n\t\tlet n1;\n\t\tlet n2;\n\t\tlet n3;\n\t\t// Skew the input space to determine which simplex cell we're in\n\t\tconst F3 = 1.0 / 3.0;\n\t\tconst s = ( xin + yin + zin ) * F3; // Very nice and simple skew factor for 3D\n\t\tconst i = Math.floor( xin + s );\n\t\tconst j = Math.floor( yin + s );\n\t\tconst k = Math.floor( zin + s );\n\t\tconst G3 = 1.0 / 6.0; // Very nice and simple unskew factor, too\n\t\tconst t = ( i + j + k ) * G3;\n\t\tconst X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n\t\tconst Y0 = j - t;\n\t\tconst Z0 = k - t;\n\t\tconst x0 = xin - X0; // The x,y,z distances from the cell origin\n\t\tconst y0 = yin - Y0;\n\t\tconst z0 = zin - Z0;\n\n\t\t// For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n\t\t// Determine which simplex we are in.\n\t\tlet i1; // Offsets for second corner of simplex in (i,j,k) coords\n\n\t\tlet j1;\n\t\tlet k1;\n\t\tlet i2; // Offsets for third corner of simplex in (i,j,k) coords\n\t\tlet j2;\n\t\tlet k2;\n\t\tif ( x0 >= y0 ) {\n\n\t\t\tif ( y0 >= z0 ) {\n\n\t\t\t\ti1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 1; k2 = 0;\n\n\t\t\t\t// X Y Z order\n\n\t\t\t} else if ( x0 >= z0 ) {\n\n\t\t\t\ti1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 0; k2 = 1;\n\n\t\t\t\t// X Z Y order\n\n\t\t\t} else {\n\n\t\t\t\ti1 = 0; j1 = 0; k1 = 1; i2 = 1; j2 = 0; k2 = 1;\n\n\t\t\t} // Z X Y order\n\n\t\t} else { // x0<y0\n\n\t\t\tif ( y0 < z0 ) {\n\n\t\t\t\ti1 = 0; j1 = 0; k1 = 1; i2 = 0; j2 = 1; k2 = 1;\n\n\t\t\t\t// Z Y X order\n\n\t\t\t} else if ( x0 < z0 ) {\n\n\t\t\t\ti1 = 0; j1 = 1; k1 = 0; i2 = 0; j2 = 1; k2 = 1;\n\n\t\t\t\t// Y Z X order\n\n\t\t\t} else {\n\n\t\t\t\ti1 = 0; j1 = 1; k1 = 0; i2 = 1; j2 = 1; k2 = 0;\n\n\t\t\t} // Y X Z order\n\n\t\t}\n\n\t\t// A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n\t\t// a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n\t\t// a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n\t\t// c = 1/6.\n\t\tconst x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n\t\tconst y1 = y0 - j1 + G3;\n\t\tconst z1 = z0 - k1 + G3;\n\t\tconst x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n\t\tconst y2 = y0 - j2 + 2.0 * G3;\n\t\tconst z2 = z0 - k2 + 2.0 * G3;\n\t\tconst x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n\t\tconst y3 = y0 - 1.0 + 3.0 * G3;\n\t\tconst z3 = z0 - 1.0 + 3.0 * G3;\n\t\t// Work out the hashed gradient indices of the four simplex corners\n\t\tconst ii = i & 255;\n\t\tconst jj = j & 255;\n\t\tconst kk = k & 255;\n\t\tconst gi0 = this.perm[ ii + this.perm[ jj + this.perm[ kk ] ] ] % 12;\n\t\tconst gi1 = this.perm[ ii + i1 + this.perm[ jj + j1 + this.perm[ kk + k1 ] ] ] % 12;\n\t\tconst gi2 = this.perm[ ii + i2 + this.perm[ jj + j2 + this.perm[ kk + k2 ] ] ] % 12;\n\t\tconst gi3 = this.perm[ ii + 1 + this.perm[ jj + 1 + this.perm[ kk + 1 ] ] ] % 12;\n\t\t// Calculate the contribution from the four corners\n\t\tlet t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n\t\tif ( t0 < 0 ) n0 = 0.0;\n\t\telse {\n\n\t\t\tt0 *= t0;\n\t\t\tn0 = t0 * t0 * this.dot3( this.grad3[ gi0 ], x0, y0, z0 );\n\n\t\t}\n\n\t\tlet t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n\t\tif ( t1 < 0 ) n1 = 0.0;\n\t\telse {\n\n\t\t\tt1 *= t1;\n\t\t\tn1 = t1 * t1 * this.dot3( this.grad3[ gi1 ], x1, y1, z1 );\n\n\t\t}\n\n\t\tlet t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n\t\tif ( t2 < 0 ) n2 = 0.0;\n\t\telse {\n\n\t\t\tt2 *= t2;\n\t\t\tn2 = t2 * t2 * this.dot3( this.grad3[ gi2 ], x2, y2, z2 );\n\n\t\t}\n\n\t\tlet t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n\t\tif ( t3 < 0 ) n3 = 0.0;\n\t\telse {\n\n\t\t\tt3 *= t3;\n\t\t\tn3 = t3 * t3 * this.dot3( this.grad3[ gi3 ], x3, y3, z3 );\n\n\t\t}\n\n\t\t// Add contributions from each corner to get the final noise value.\n\t\t// The result is scaled to stay just inside [-1,1]\n\t\treturn 32.0 * ( n0 + n1 + n2 + n3 );\n\n\t}\n\n\t// 4D simplex noise\n\tnoise4d( x, y, z, w ) {\n\n\t\t// For faster and easier lookups\n\t\tconst grad4 = this.grad4;\n\t\tconst simplex = this.simplex;\n\t\tconst perm = this.perm;\n\n\t\t// The skewing and unskewing factors are hairy again for the 4D case\n\t\tconst F4 = ( Math.sqrt( 5.0 ) - 1.0 ) / 4.0;\n\t\tconst G4 = ( 5.0 - Math.sqrt( 5.0 ) ) / 20.0;\n\t\tlet n0; // Noise contributions from the five corners\n\t\tlet n1;\n\t\tlet n2;\n\t\tlet n3;\n\t\tlet n4;\n\t\t// Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n\t\tconst s = ( x + y + z + w ) * F4; // Factor for 4D skewing\n\t\tconst i = Math.floor( x + s );\n\t\tconst j = Math.floor( y + s );\n\t\tconst k = Math.floor( z + s );\n\t\tconst l = Math.floor( w + s );\n\t\tconst t = ( i + j + k + l ) * G4; // Factor for 4D unskewing\n\t\tconst X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n\t\tconst Y0 = j - t;\n\t\tconst Z0 = k - t;\n\t\tconst W0 = l - t;\n\t\tconst x0 = x - X0; // The x,y,z,w distances from the cell origin\n\t\tconst y0 = y - Y0;\n\t\tconst z0 = z - Z0;\n\t\tconst w0 = w - W0;\n\n\t\t// For the 4D case, the simplex is a 4D shape I won't even try to describe.\n\t\t// To find out which of the 24 possible simplices we're in, we need to\n\t\t// determine the magnitude ordering of x0, y0, z0 and w0.\n\t\t// The method below is a good way of finding the ordering of x,y,z,w and\n\t\t// then find the correct traversal order for the simplex we’re in.\n\t\t// First, six pair-wise comparisons are performed between each possible pair\n\t\t// of the four coordinates, and the results are used to add up binary bits\n\t\t// for an integer index.\n\t\tconst c1 = ( x0 > y0 ) ? 32 : 0;\n\t\tconst c2 = ( x0 > z0 ) ? 16 : 0;\n\t\tconst c3 = ( y0 > z0 ) ? 8 : 0;\n\t\tconst c4 = ( x0 > w0 ) ? 4 : 0;\n\t\tconst c5 = ( y0 > w0 ) ? 2 : 0;\n\t\tconst c6 = ( z0 > w0 ) ? 1 : 0;\n\t\tconst c = c1 + c2 + c3 + c4 + c5 + c6;\n\n\t\t// simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n\t\t// Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n\t\t// impossible. Only the 24 indices which have non-zero entries make any sense.\n\t\t// We use a thresholding to set the coordinates in turn from the largest magnitude.\n\t\t// The number 3 in the \"simplex\" array is at the position of the largest coordinate.\n\t\tconst i1 = simplex[ c ][ 0 ] >= 3 ? 1 : 0;\n\t\tconst j1 = simplex[ c ][ 1 ] >= 3 ? 1 : 0;\n\t\tconst k1 = simplex[ c ][ 2 ] >= 3 ? 1 : 0;\n\t\tconst l1 = simplex[ c ][ 3 ] >= 3 ? 1 : 0;\n\t\t// The number 2 in the \"simplex\" array is at the second largest coordinate.\n\t\tconst i2 = simplex[ c ][ 0 ] >= 2 ? 1 : 0;\n\t\tconst j2 = simplex[ c ][ 1 ] >= 2 ? 1 : 0;\n\t\tconst k2 = simplex[ c ][ 2 ] >= 2 ? 1 : 0;\n\t\tconst l2 = simplex[ c ][ 3 ] >= 2 ? 1 : 0;\n\t\t// The number 1 in the \"simplex\" array is at the second smallest coordinate.\n\t\tconst i3 = simplex[ c ][ 0 ] >= 1 ? 1 : 0;\n\t\tconst j3 = simplex[ c ][ 1 ] >= 1 ? 1 : 0;\n\t\tconst k3 = simplex[ c ][ 2 ] >= 1 ? 1 : 0;\n\t\tconst l3 = simplex[ c ][ 3 ] >= 1 ? 1 : 0;\n\t\t// The fifth corner has all coordinate offsets = 1, so no need to look that up.\n\t\tconst x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n\t\tconst y1 = y0 - j1 + G4;\n\t\tconst z1 = z0 - k1 + G4;\n\t\tconst w1 = w0 - l1 + G4;\n\t\tconst x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n\t\tconst y2 = y0 - j2 + 2.0 * G4;\n\t\tconst z2 = z0 - k2 + 2.0 * G4;\n\t\tconst w2 = w0 - l2 + 2.0 * G4;\n\t\tconst x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n\t\tconst y3 = y0 - j3 + 3.0 * G4;\n\t\tconst z3 = z0 - k3 + 3.0 * G4;\n\t\tconst w3 = w0 - l3 + 3.0 * G4;\n\t\tconst x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n\t\tconst y4 = y0 - 1.0 + 4.0 * G4;\n\t\tconst z4 = z0 - 1.0 + 4.0 * G4;\n\t\tconst w4 = w0 - 1.0 + 4.0 * G4;\n\t\t// Work out the hashed gradient indices of the five simplex corners\n\t\tconst ii = i & 255;\n\t\tconst jj = j & 255;\n\t\tconst kk = k & 255;\n\t\tconst ll = l & 255;\n\t\tconst gi0 = perm[ ii + perm[ jj + perm[ kk + perm[ ll ] ] ] ] % 32;\n\t\tconst gi1 = perm[ ii + i1 + perm[ jj + j1 + perm[ kk + k1 + perm[ ll + l1 ] ] ] ] % 32;\n\t\tconst gi2 = perm[ ii + i2 + perm[ jj + j2 + perm[ kk + k2 + perm[ ll + l2 ] ] ] ] % 32;\n\t\tconst gi3 = perm[ ii + i3 + perm[ jj + j3 + perm[ kk + k3 + perm[ ll + l3 ] ] ] ] % 32;\n\t\tconst gi4 = perm[ ii + 1 + perm[ jj + 1 + perm[ kk + 1 + perm[ ll + 1 ] ] ] ] % 32;\n\t\t// Calculate the contribution from the five corners\n\t\tlet t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n\t\tif ( t0 < 0 ) n0 = 0.0;\n\t\telse {\n\n\t\t\tt0 *= t0;\n\t\t\tn0 = t0 * t0 * this.dot4( grad4[ gi0 ], x0, y0, z0, w0 );\n\n\t\t}\n\n\t\tlet t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n\t\tif ( t1 < 0 ) n1 = 0.0;\n\t\telse {\n\n\t\t\tt1 *= t1;\n\t\t\tn1 = t1 * t1 * this.dot4( grad4[ gi1 ], x1, y1, z1, w1 );\n\n\t\t}\n\n\t\tlet t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n\t\tif ( t2 < 0 ) n2 = 0.0;\n\t\telse {\n\n\t\t\tt2 *= t2;\n\t\t\tn2 = t2 * t2 * this.dot4( grad4[ gi2 ], x2, y2, z2, w2 );\n\n\t\t}\n\n\t\tlet t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n\t\tif ( t3 < 0 ) n3 = 0.0;\n\t\telse {\n\n\t\t\tt3 *= t3;\n\t\t\tn3 = t3 * t3 * this.dot4( grad4[ gi3 ], x3, y3, z3, w3 );\n\n\t\t}\n\n\t\tlet t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n\t\tif ( t4 < 0 ) n4 = 0.0;\n\t\telse {\n\n\t\t\tt4 *= t4;\n\t\t\tn4 = t4 * t4 * this.dot4( grad4[ gi4 ], x4, y4, z4, w4 );\n\n\t\t}\n\n\t\t// Sum up and scale the result to cover the range [-1,1]\n\t\treturn 27.0 * ( n0 + n1 + n2 + n3 + n4 );\n\n\t}\n\n}\n\nexport { SimplexNoise };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"\";","// Calculate the base URL based on the script's src attribute\nconst baseUrl = new URL(document.currentScript.src).href.replace(/gltf-model-plus.min.js$/, \"\");\n// Set the webpack public path to load assets from the correct location\n__webpack_public_path__ = `${baseUrl}dist/`;\n\nimport \"./components/environment-settings\";\nimport \"./components/gltf-model-plus\";\nimport \"./components/media-frame\";\nimport \"./components/reflection-probe\";\nimport \"./components/simple-water\";\nimport \"./components/uv-scroll\";\nimport \"./components/waypoint\";\nimport \"./inflators\";\n"],"names":[],"sourceRoot":""}